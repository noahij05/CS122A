
achoi035_njime006_Lab5_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000f12  00000fa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000640  00800120  00800120  00000fc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c72  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f14  00000000  00000000  00003eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001af2  00000000  00000000  00004dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  000068f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001008  00000000  00000000  00006f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000221f  00000000  00000000  00007f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000a12b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	fc c3       	rjmp	.+2040   	; 0x82e <__vector_13>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ae 01       	movw	r20, r28
  8e:	b1 01       	movw	r22, r2
  90:	b4 01       	movw	r22, r8
  92:	b7 01       	movw	r22, r14
  94:	ba 01       	movw	r22, r20
  96:	bd 01       	movw	r22, r26
  98:	c0 01       	movw	r24, r0
  9a:	c3 01       	movw	r24, r6
  9c:	c6 01       	movw	r24, r12
  9e:	d6 01       	movw	r26, r12
  a0:	da 01       	movw	r26, r20
  a2:	de 01       	movw	r26, r28
  a4:	e2 01       	movw	r28, r4
  a6:	e6 01       	movw	r28, r12
  a8:	ea 01       	movw	r28, r20
  aa:	ee 01       	movw	r28, r28
  ac:	f2 01       	movw	r30, r4
  ae:	f6 01       	movw	r30, r12
  b0:	3f 02       	muls	r19, r31
  b2:	42 02       	muls	r20, r18
  b4:	45 02       	muls	r20, r21
  b6:	48 02       	muls	r20, r24
  b8:	4b 02       	muls	r20, r27
  ba:	4e 02       	muls	r20, r30
  bc:	51 02       	muls	r21, r17
  be:	61 02       	muls	r22, r17
  c0:	65 02       	muls	r22, r21
  c2:	69 02       	muls	r22, r25
  c4:	6d 02       	muls	r22, r29
  c6:	71 02       	muls	r23, r17
  c8:	75 02       	muls	r23, r21
  ca:	79 02       	muls	r23, r25

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d0 e4       	ldi	r29, 0x40	; 64
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e2 e1       	ldi	r30, 0x12	; 18
  e0:	ff e0       	ldi	r31, 0x0F	; 15
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a0 32       	cpi	r26, 0x20	; 32
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	27 e0       	ldi	r18, 0x07	; 7
  f4:	a0 e2       	ldi	r26, 0x20	; 32
  f6:	b1 e0       	ldi	r27, 0x01	; 1
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a0 36       	cpi	r26, 0x60	; 96
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	2f d2       	rcall	.+1118   	; 0x562 <main>
 104:	04 c7       	rjmp	.+3592   	; 0xf0e <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
 10e:	4a d5       	rcall	.+2708   	; 0xba4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 110:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 114:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 118:	89 2b       	or	r24, r25
 11a:	31 f4       	brne	.+12     	; 0x128 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 11c:	85 e2       	ldi	r24, 0x25	; 37
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 124:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 128:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <xNextFreeByte>
 12c:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <xNextFreeByte+0x1>
 130:	c9 01       	movw	r24, r18
 132:	8c 0f       	add	r24, r28
 134:	9d 1f       	adc	r25, r29
 136:	8b 3d       	cpi	r24, 0xDB	; 219
 138:	45 e0       	ldi	r20, 0x05	; 5
 13a:	94 07       	cpc	r25, r20
 13c:	70 f4       	brcc	.+28     	; 0x15a <pvPortMalloc+0x52>
 13e:	28 17       	cp	r18, r24
 140:	39 07       	cpc	r19, r25
 142:	70 f4       	brcc	.+28     	; 0x160 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 144:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <__data_end>
 148:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <__data_end+0x1>
 14c:	c2 0f       	add	r28, r18
 14e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 150:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <xNextFreeByte+0x1>
 154:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <xNextFreeByte>
 158:	05 c0       	rjmp	.+10     	; 0x164 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	d0 e0       	ldi	r29, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <pvPortMalloc+0x5c>
 160:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	dc d5       	rcall	.+3000   	; 0xd1e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 166:	ce 01       	movw	r24, r28
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 16e:	08 95       	ret

00000170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 170:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 172:	03 96       	adiw	r24, 0x03	; 3
 174:	92 83       	std	Z+2, r25	; 0x02
 176:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	3f ef       	ldi	r19, 0xFF	; 255
 17c:	34 83       	std	Z+4, r19	; 0x04
 17e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 180:	96 83       	std	Z+6, r25	; 0x06
 182:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 184:	90 87       	std	Z+8, r25	; 0x08
 186:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 188:	10 82       	st	Z, r1
 18a:	08 95       	ret

0000018c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 18c:	fc 01       	movw	r30, r24
 18e:	11 86       	std	Z+9, r1	; 0x09
 190:	10 86       	std	Z+8, r1	; 0x08
 192:	08 95       	ret

00000194 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	9c 01       	movw	r18, r24
 19a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 19c:	dc 01       	movw	r26, r24
 19e:	11 96       	adiw	r26, 0x01	; 1
 1a0:	cd 91       	ld	r28, X+
 1a2:	dc 91       	ld	r29, X
 1a4:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 1a6:	d3 83       	std	Z+3, r29	; 0x03
 1a8:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	9d 81       	ldd	r25, Y+5	; 0x05
 1ae:	95 83       	std	Z+5, r25	; 0x05
 1b0:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 1b2:	8c 81       	ldd	r24, Y+4	; 0x04
 1b4:	9d 81       	ldd	r25, Y+5	; 0x05
 1b6:	dc 01       	movw	r26, r24
 1b8:	13 96       	adiw	r26, 0x03	; 3
 1ba:	7c 93       	st	X, r23
 1bc:	6e 93       	st	-X, r22
 1be:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 1c0:	7d 83       	std	Y+5, r23	; 0x05
 1c2:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 1c4:	31 87       	std	Z+9, r19	; 0x09
 1c6:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 1c8:	f9 01       	movw	r30, r18
 1ca:	80 81       	ld	r24, Z
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 83       	st	Z, r24
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 1dc:	48 81       	ld	r20, Y
 1de:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1e0:	4f 3f       	cpi	r20, 0xFF	; 255
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	52 07       	cpc	r21, r18
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1e8:	fc 01       	movw	r30, r24
 1ea:	a7 81       	ldd	r26, Z+7	; 0x07
 1ec:	b0 85       	ldd	r27, Z+8	; 0x08
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1f0:	dc 01       	movw	r26, r24
 1f2:	13 96       	adiw	r26, 0x03	; 3
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <vListInsert+0x22>
 1f6:	df 01       	movw	r26, r30
 1f8:	12 96       	adiw	r26, 0x02	; 2
 1fa:	ed 91       	ld	r30, X+
 1fc:	fc 91       	ld	r31, X
 1fe:	13 97       	sbiw	r26, 0x03	; 3
 200:	20 81       	ld	r18, Z
 202:	31 81       	ldd	r19, Z+1	; 0x01
 204:	42 17       	cp	r20, r18
 206:	53 07       	cpc	r21, r19
 208:	b0 f7       	brcc	.-20     	; 0x1f6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 20a:	12 96       	adiw	r26, 0x02	; 2
 20c:	ed 91       	ld	r30, X+
 20e:	fc 91       	ld	r31, X
 210:	13 97       	sbiw	r26, 0x03	; 3
 212:	fb 83       	std	Y+3, r31	; 0x03
 214:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 216:	d5 83       	std	Z+5, r29	; 0x05
 218:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 21a:	bd 83       	std	Y+5, r27	; 0x05
 21c:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 21e:	13 96       	adiw	r26, 0x03	; 3
 220:	dc 93       	st	X, r29
 222:	ce 93       	st	-X, r28
 224:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 226:	99 87       	std	Y+9, r25	; 0x09
 228:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 22a:	fc 01       	movw	r30, r24
 22c:	20 81       	ld	r18, Z
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	20 83       	st	Z, r18
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 23e:	a0 85       	ldd	r26, Z+8	; 0x08
 240:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 242:	c2 81       	ldd	r28, Z+2	; 0x02
 244:	d3 81       	ldd	r29, Z+3	; 0x03
 246:	84 81       	ldd	r24, Z+4	; 0x04
 248:	95 81       	ldd	r25, Z+5	; 0x05
 24a:	9d 83       	std	Y+5, r25	; 0x05
 24c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 24e:	c4 81       	ldd	r28, Z+4	; 0x04
 250:	d5 81       	ldd	r29, Z+5	; 0x05
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	93 81       	ldd	r25, Z+3	; 0x03
 256:	9b 83       	std	Y+3, r25	; 0x03
 258:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 25a:	11 96       	adiw	r26, 0x01	; 1
 25c:	8d 91       	ld	r24, X+
 25e:	9c 91       	ld	r25, X
 260:	12 97       	sbiw	r26, 0x02	; 2
 262:	e8 17       	cp	r30, r24
 264:	f9 07       	cpc	r31, r25
 266:	31 f4       	brne	.+12     	; 0x274 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 268:	84 81       	ldd	r24, Z+4	; 0x04
 26a:	95 81       	ldd	r25, Z+5	; 0x05
 26c:	12 96       	adiw	r26, 0x02	; 2
 26e:	9c 93       	st	X, r25
 270:	8e 93       	st	-X, r24
 272:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 274:	11 86       	std	Z+9, r1	; 0x09
 276:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 278:	8c 91       	ld	r24, X
 27a:	81 50       	subi	r24, 0x01	; 1
 27c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 27e:	8c 91       	ld	r24, X
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <ShiftData>:
	//Clear data Lines
	PORTD = 0x00;
}

void ShiftDataEnable() {
	PORTD = 0x08;
 286:	27 e0       	ldi	r18, 0x07	; 7
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	58 e0       	ldi	r21, 0x08	; 8
 28c:	e8 2f       	mov	r30, r24
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	5b b9       	out	0x0b, r21	; 11
 292:	4b b1       	in	r20, 0x0b	; 11
 294:	bf 01       	movw	r22, r30
 296:	02 2e       	mov	r0, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <ShiftData+0x18>
 29a:	75 95       	asr	r23
 29c:	67 95       	ror	r22
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <ShiftData+0x14>
 2a2:	96 2f       	mov	r25, r22
 2a4:	91 70       	andi	r25, 0x01	; 1
 2a6:	94 2b       	or	r25, r20
 2a8:	9b b9       	out	0x0b, r25	; 11
 2aa:	5a 9a       	sbi	0x0b, 2	; 11
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	31 09       	sbc	r19, r1
 2b0:	78 f7       	brcc	.-34     	; 0x290 <ShiftData+0xa>
 2b2:	59 9a       	sbi	0x0b, 1	; 11
 2b4:	1b b8       	out	0x0b, r1	; 11
 2b6:	08 95       	ret

000002b8 <LEDS_Init>:
char flag = 1;	
	
	

void LEDS_Init(){
	led_state = INIT;
 2b8:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <led_state>
	led_festive = INIT1;
 2bc:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <led_festive>
	led_festive1 = INIT2;
 2c0:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <led_festive1>
 2c4:	08 95       	ret

000002c6 <button_check>:
}


void button_check()
{	
	if((~PINA & 0x03) == 0x03)
 2c6:	80 b1       	in	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	80 95       	com	r24
 2cc:	90 95       	com	r25
 2ce:	83 70       	andi	r24, 0x03	; 3
 2d0:	99 27       	eor	r25, r25
 2d2:	03 97       	sbiw	r24, 0x03	; 3
 2d4:	79 f4       	brne	.+30     	; 0x2f4 <button_check+0x2e>
	{	
		switch(flag)
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2da:	88 23       	and	r24, r24
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <button_check+0x1e>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	29 f0       	breq	.+10     	; 0x2ec <button_check+0x26>
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <button_check+0x2e>
		{
			case 0:
				flag = 1; //count = 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				break;
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <button_check+0x2e>
			case 1:
				flag = 0; ShiftData(0);
 2ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	c9 df       	rcall	.-110    	; 0x286 <ShiftData>
				break;
		}
	}
	
	if ((~PINA & 0x01) == 1 && count != 3 && flag == 1)
 2f4:	00 99       	sbic	0x00, 0	; 0
 2f6:	0b c0       	rjmp	.+22     	; 0x30e <button_check+0x48>
 2f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	a9 f0       	breq	.+42     	; 0x32a <button_check+0x64>
 300:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 304:	91 30       	cpi	r25, 0x01	; 1
 306:	19 f4       	brne	.+6      	; 0x30e <button_check+0x48>
	{
		count++;
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
	}
	if ((~PINA & 0x02) == 2 && count != 1 && flag == 1)
 30e:	01 99       	sbic	0x00, 1	; 0
 310:	0e c0       	rjmp	.+28     	; 0x32e <button_check+0x68>
 312:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	51 f0       	breq	.+20     	; 0x32e <button_check+0x68>
 31a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 31e:	91 30       	cpi	r25, 0x01	; 1
 320:	31 f4       	brne	.+12     	; 0x32e <button_check+0x68>
	{
		count--;
 322:	81 50       	subi	r24, 0x01	; 1
 324:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
	}
	
}
 328:	08 95       	ret
	
	if ((~PINA & 0x01) == 1 && count != 3 && flag == 1)
	{
		count++;
	}
	if ((~PINA & 0x02) == 2 && count != 1 && flag == 1)
 32a:	01 9b       	sbis	0x00, 1	; 0
 32c:	f6 cf       	rjmp	.-20     	; 0x31a <button_check+0x54>
 32e:	08 95       	ret

00000330 <buttonSecTask>:
	NULL );
}

void buttonSecTask() {
	for(;;) {
		button_check();
 330:	ca df       	rcall	.-108    	; 0x2c6 <button_check>
		vTaskDelay(100);
 332:	84 e6       	ldi	r24, 0x64	; 100
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	6c d5       	rcall	.+2776   	; 0xe10 <vTaskDelay>
 338:	fb cf       	rjmp	.-10     	; 0x330 <buttonSecTask>

0000033a <LEDS_Tick>:
	
}

void LEDS_Tick(char count1, char flag1){
	
	if (count1 == 1 && flag1 == 1)
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <LEDS_Tick+0x6>
 33e:	5e c0       	rjmp	.+188    	; 0x3fc <LEDS_Tick+0xc2>
 340:	61 30       	cpi	r22, 0x01	; 1
 342:	09 f0       	breq	.+2      	; 0x346 <LEDS_Tick+0xc>
 344:	dd c0       	rjmp	.+442    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
	{
		//Actions
		switch(led_state){
 346:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <led_state>
 34a:	8e 2f       	mov	r24, r30
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	89 30       	cpi	r24, 0x09	; 9
 350:	91 05       	cpc	r25, r1
 352:	f8 f4       	brcc	.+62     	; 0x392 <LEDS_Tick+0x58>
 354:	fc 01       	movw	r30, r24
 356:	ea 5b       	subi	r30, 0xBA	; 186
 358:	ff 4f       	sbci	r31, 0xFF	; 255
 35a:	d0 c5       	rjmp	.+2976   	; 0xefc <__tablejump2__>
			case INIT:
				ShiftData(0x00);
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	93 df       	rcall	.-218    	; 0x286 <ShiftData>
			break;
			case L0:
				ShiftData(0x01);
 360:	1a c0       	rjmp	.+52     	; 0x396 <LEDS_Tick+0x5c>
 362:	81 e0       	ldi	r24, 0x01	; 1
			break;
 364:	90 df       	rcall	.-224    	; 0x286 <ShiftData>
			case L1:
				ShiftData(0x02);
 366:	17 c0       	rjmp	.+46     	; 0x396 <LEDS_Tick+0x5c>
 368:	82 e0       	ldi	r24, 0x02	; 2
			break;
 36a:	8d df       	rcall	.-230    	; 0x286 <ShiftData>
			case L2:
				ShiftData(0x04);
 36c:	14 c0       	rjmp	.+40     	; 0x396 <LEDS_Tick+0x5c>
 36e:	84 e0       	ldi	r24, 0x04	; 4
			break;
			case L3:
				ShiftData(0x08);
 370:	8a df       	rcall	.-236    	; 0x286 <ShiftData>
 372:	11 c0       	rjmp	.+34     	; 0x396 <LEDS_Tick+0x5c>
			break;
 374:	88 e0       	ldi	r24, 0x08	; 8
			case L4:
				ShiftData(16);
 376:	87 df       	rcall	.-242    	; 0x286 <ShiftData>
 378:	0e c0       	rjmp	.+28     	; 0x396 <LEDS_Tick+0x5c>
			break;
 37a:	80 e1       	ldi	r24, 0x10	; 16
			case L5:
				ShiftData(32);
 37c:	84 df       	rcall	.-248    	; 0x286 <ShiftData>
 37e:	0b c0       	rjmp	.+22     	; 0x396 <LEDS_Tick+0x5c>
			break;
			case L6:
				ShiftData(64);
 380:	80 e2       	ldi	r24, 0x20	; 32
 382:	81 df       	rcall	.-254    	; 0x286 <ShiftData>
 384:	08 c0       	rjmp	.+16     	; 0x396 <LEDS_Tick+0x5c>
			break;
 386:	80 e4       	ldi	r24, 0x40	; 64
			case L7:
				ShiftData(128);
 388:	7e df       	rcall	.-260    	; 0x286 <ShiftData>
 38a:	05 c0       	rjmp	.+10     	; 0x396 <LEDS_Tick+0x5c>
 38c:	80 e8       	ldi	r24, 0x80	; 128
			break;
 38e:	7b df       	rcall	.-266    	; 0x286 <ShiftData>
		
			default:
			ShiftData(0x00);
 390:	02 c0       	rjmp	.+4      	; 0x396 <LEDS_Tick+0x5c>
 392:	80 e0       	ldi	r24, 0x00	; 0
		}
	
		switch(led_state){
 394:	78 df       	rcall	.-272    	; 0x286 <ShiftData>
 396:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <led_state>
 39a:	8e 2f       	mov	r24, r30
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	89 30       	cpi	r24, 0x09	; 9
 3a0:	91 05       	cpc	r25, r1
 3a2:	40 f5       	brcc	.+80     	; 0x3f4 <LEDS_Tick+0xba>
 3a4:	fc 01       	movw	r30, r24
 3a6:	e1 5b       	subi	r30, 0xB1	; 177
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	a8 c5       	rjmp	.+2896   	; 0xefc <__tablejump2__>
			case INIT:
				led_state = L0;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3b2:	08 95       	ret
			case L0:
				led_state = L1;
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3ba:	08 95       	ret
			case L1:
				led_state = L2;
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3c2:	08 95       	ret
			case L2:
				led_state = L3;
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3ca:	08 95       	ret
			case L3:
				led_state = L4;
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3d2:	08 95       	ret
			case L4:
				led_state = L5;
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3da:	08 95       	ret
			case L5:
				led_state = L6;
 3dc:	87 e0       	ldi	r24, 0x07	; 7
 3de:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3e2:	08 95       	ret
			case L6:
				led_state = L7;
 3e4:	88 e0       	ldi	r24, 0x08	; 8
 3e6:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3ea:	08 95       	ret
			case L7:
				led_state = L0;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3f2:	08 95       	ret
		
			default:
				led_state = L0;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <led_state>
			break;
 3fa:	08 95       	ret
		}
	}
	
	if (count1 == 2 && flag1 == 1)
 3fc:	82 30       	cpi	r24, 0x02	; 2
 3fe:	71 f5       	brne	.+92     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 400:	61 30       	cpi	r22, 0x01	; 1
 402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		//Actions
		switch(led_festive){
 404:	7d c0       	rjmp	.+250    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 406:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <led_festive>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	39 f0       	breq	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40e:	18 f0       	brcs	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			case INIT1:
			ShiftData(0x0F);
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	39 f0       	breq	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 414:	09 c0       	rjmp	.+18     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			break;
 416:	8f e0       	ldi	r24, 0x0F	; 15
			case L0F:
			ShiftData(0x0F);
 418:	36 df       	rcall	.-404    	; 0x286 <ShiftData>
 41a:	08 c0       	rjmp	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41c:	8f e0       	ldi	r24, 0x0F	; 15
			break;
 41e:	33 df       	rcall	.-410    	; 0x286 <ShiftData>
			case LF0:
			ShiftData(0xF0);
 420:	05 c0       	rjmp	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 422:	80 ef       	ldi	r24, 0xF0	; 240
 424:	30 df       	rcall	.-416    	; 0x286 <ShiftData>
			break;
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		
			default:
			ShiftData(0x0F);
 428:	8f e0       	ldi	r24, 0x0F	; 15
 42a:	2d df       	rcall	.-422    	; 0x286 <ShiftData>
 42c:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <led_festive>
		}
	
		switch(led_festive){
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	41 f0       	breq	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 434:	18 f0       	brcs	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	49 f0       	breq	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43a:	0c c0       	rjmp	.+24     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 43c:	81 e0       	ldi	r24, 0x01	; 1
			case INIT:
			led_festive = L0F;
 43e:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <led_festive>
 442:	08 95       	ret
			break;
 444:	82 e0       	ldi	r24, 0x02	; 2
			case L0F:
			led_festive = LF0;
 446:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <led_festive>
 44a:	08 95       	ret
			break;
 44c:	81 e0       	ldi	r24, 0x01	; 1
			case LF0:
			led_festive = L0F;
 44e:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <led_festive>
 452:	08 95       	ret
			break;
 454:	81 e0       	ldi	r24, 0x01	; 1
		
			default:
			led_festive = L0F;
 456:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <led_festive>
 45a:	08 95       	ret
			break;
 45c:	83 30       	cpi	r24, 0x03	; 3
		}
	}
	if (count1 == 3 && flag1 == 1)
 45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	4f c0       	rjmp	.+158    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 462:	61 30       	cpi	r22, 0x01	; 1
 464:	09 f0       	breq	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	{
		//Actions
		switch(led_festive1){
 466:	4c c0       	rjmp	.+152    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 468:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <led_festive1>
 46c:	8e 2f       	mov	r24, r30
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	87 30       	cpi	r24, 0x07	; 7
 472:	91 05       	cpc	r25, r1
 474:	c8 f4       	brcc	.+50     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 476:	fc 01       	movw	r30, r24
			case INIT2:
				ShiftData(0x05);
 478:	e8 5a       	subi	r30, 0xA8	; 168
 47a:	ff 4f       	sbci	r31, 0xFF	; 255
			break;
 47c:	3f c5       	rjmp	.+2686   	; 0xefc <__tablejump2__>
			case L05:
				ShiftData(0x05);
 47e:	85 e0       	ldi	r24, 0x05	; 5
 480:	02 df       	rcall	.-508    	; 0x286 <ShiftData>
			break;
 482:	14 c0       	rjmp	.+40     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			case L0A:
				ShiftData(0x0A);
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	ff de       	rcall	.-514    	; 0x286 <ShiftData>
 488:	11 c0       	rjmp	.+34     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			break;
 48a:	8a e0       	ldi	r24, 0x0A	; 10
			case L41:
				ShiftData(0x14);
 48c:	fc de       	rcall	.-520    	; 0x286 <ShiftData>
 48e:	0e c0       	rjmp	.+28     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 490:	84 e1       	ldi	r24, 0x14	; 20
			break;
 492:	f9 de       	rcall	.-526    	; 0x286 <ShiftData>
			case L28:
				ShiftData(0x28);
 494:	0b c0       	rjmp	.+22     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 496:	88 e2       	ldi	r24, 0x28	; 40
			break;
 498:	f6 de       	rcall	.-532    	; 0x286 <ShiftData>
			case L50:
				ShiftData(0x50);
 49a:	08 c0       	rjmp	.+16     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 49c:	80 e5       	ldi	r24, 0x50	; 80
 49e:	f3 de       	rcall	.-538    	; 0x286 <ShiftData>
			break;
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			case LA0:
				ShiftData(0xA0);
 4a2:	80 ea       	ldi	r24, 0xA0	; 160
 4a4:	f0 de       	rcall	.-544    	; 0x286 <ShiftData>
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			break;
 4a8:	85 e0       	ldi	r24, 0x05	; 5
		
		
			default:
			ShiftData(0x05);
 4aa:	ed de       	rcall	.-550    	; 0x286 <ShiftData>
 4ac:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <led_festive1>
		}
	
		switch(led_festive1){
 4b0:	8e 2f       	mov	r24, r30
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	87 30       	cpi	r24, 0x07	; 7
 4b6:	91 05       	cpc	r25, r1
 4b8:	00 f5       	brcc	.+64     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4ba:	fc 01       	movw	r30, r24
 4bc:	e1 5a       	subi	r30, 0xA1	; 161
 4be:	ff 4f       	sbci	r31, 0xFF	; 255
 4c0:	1d c5       	rjmp	.+2618   	; 0xefc <__tablejump2__>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <led_festive1>
			case INIT:
				led_festive1 = L05;
 4c8:	08 95       	ret
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <led_festive1>
			break;
			case L05:
				led_festive1 = L0A;
 4d0:	08 95       	ret
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <led_festive1>
			break;
			case L0A:
				led_festive1 = L41;
 4d8:	08 95       	ret
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <led_festive1>
			break;
			case L41:
				led_festive1 = L28;
 4e0:	08 95       	ret
 4e2:	85 e0       	ldi	r24, 0x05	; 5
 4e4:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <led_festive1>
			break;
			case L28:
				led_festive1 = L50;
 4e8:	08 95       	ret
 4ea:	86 e0       	ldi	r24, 0x06	; 6
 4ec:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <led_festive1>
			break;
			case L50:
				led_festive1 = LA0;
 4f0:	08 95       	ret
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <led_festive1>
			break;
			case LA0:
				led_festive1 = L05;
 4f8:	08 95       	ret
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <led_festive1>
			break;
		
			default:
				led_festive1 = L05;
 500:	08 95       	ret

00000502 <LedSecTask>:
 502:	da de       	rcall	.-588    	; 0x2b8 <LEDS_Init>
 504:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>


void LedSecTask() {
	LEDS_Init();
	for(;;) {
		LEDS_Tick(count, flag);
 508:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 50c:	16 df       	rcall	.-468    	; 0x33a <LEDS_Tick>
		vTaskDelay(200);
 50e:	88 ec       	ldi	r24, 0xC8	; 200
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	7e d4       	rcall	.+2300   	; 0xe10 <vTaskDelay>
 514:	f7 cf       	rjmp	.-18     	; 0x504 <LedSecTask+0x2>

00000516 <StartSecPulse>:
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 516:	ef 92       	push	r14
 518:	ff 92       	push	r15
 51a:	0f 93       	push	r16
	xTaskCreate(LedSecTask,
 51c:	e1 2c       	mov	r14, r1
 51e:	f1 2c       	mov	r15, r1
 520:	08 2f       	mov	r16, r24
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	45 e5       	ldi	r20, 0x55	; 85
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	71 e0       	ldi	r23, 0x01	; 1
 52e:	81 e8       	ldi	r24, 0x81	; 129
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	13 d2       	rcall	.+1062   	; 0x95a <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 534:	0f 91       	pop	r16
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	08 95       	ret

0000053c <StartbuttonPulse>:
		button_check();
		vTaskDelay(100);
	}
}

void StartbuttonPulse(unsigned portBASE_TYPE Priority) {
 53c:	ef 92       	push	r14
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
	xTaskCreate(buttonSecTask,
 542:	e1 2c       	mov	r14, r1
 544:	f1 2c       	mov	r15, r1
 546:	08 2f       	mov	r16, r24
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	45 e5       	ldi	r20, 0x55	; 85
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	6d e0       	ldi	r22, 0x0D	; 13
 552:	71 e0       	ldi	r23, 0x01	; 1
 554:	88 e9       	ldi	r24, 0x98	; 152
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	00 d2       	rcall	.+1024   	; 0x95a <xTaskCreate>
	(signed portCHAR *)"buttonSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	08 95       	ret

00000562 <main>:

int main(void)
{
    DDRD = 0xFF; PORTD = 0x00;
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	8a b9       	out	0x0a, r24	; 10
 566:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0x00; PORTA = 0xFF;
 568:	11 b8       	out	0x01, r1	; 1
 56a:	82 b9       	out	0x02, r24	; 2
	LEDS_Init();
 56c:	a5 de       	rcall	.-694    	; 0x2b8 <LEDS_Init>
	
    StartSecPulse(1);
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	d2 df       	rcall	.-92     	; 0x516 <StartSecPulse>
	StartbuttonPulse(2);
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	e3 df       	rcall	.-58     	; 0x53c <StartbuttonPulse>
    //RunSchedular
    vTaskStartScheduler();
 576:	ee d2       	rcall	.+1500   	; 0xb54 <vTaskStartScheduler>
 578:	80 e0       	ldi	r24, 0x00	; 0
}
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	08 95       	ret

0000057e <pxPortInitialiseStack>:
 57e:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 580:	fc 01       	movw	r30, r24
 582:	30 83       	st	Z, r19
 584:	31 97       	sbiw	r30, 0x01	; 1
 586:	22 e2       	ldi	r18, 0x22	; 34
 588:	20 83       	st	Z, r18
 58a:	31 97       	sbiw	r30, 0x01	; 1
 58c:	a3 e3       	ldi	r26, 0x33	; 51
 58e:	a0 83       	st	Z, r26
 590:	31 97       	sbiw	r30, 0x01	; 1
 592:	60 83       	st	Z, r22
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	70 83       	st	Z, r23
 598:	31 97       	sbiw	r30, 0x01	; 1
 59a:	10 82       	st	Z, r1
 59c:	31 97       	sbiw	r30, 0x01	; 1
 59e:	60 e8       	ldi	r22, 0x80	; 128
 5a0:	60 83       	st	Z, r22
 5a2:	31 97       	sbiw	r30, 0x01	; 1
 5a4:	10 82       	st	Z, r1
 5a6:	31 97       	sbiw	r30, 0x01	; 1
 5a8:	62 e0       	ldi	r22, 0x02	; 2
 5aa:	60 83       	st	Z, r22
 5ac:	31 97       	sbiw	r30, 0x01	; 1
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	60 83       	st	Z, r22
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	64 e0       	ldi	r22, 0x04	; 4
 5b6:	60 83       	st	Z, r22
 5b8:	31 97       	sbiw	r30, 0x01	; 1
 5ba:	65 e0       	ldi	r22, 0x05	; 5
 5bc:	60 83       	st	Z, r22
 5be:	31 97       	sbiw	r30, 0x01	; 1
 5c0:	66 e0       	ldi	r22, 0x06	; 6
 5c2:	60 83       	st	Z, r22
 5c4:	31 97       	sbiw	r30, 0x01	; 1
 5c6:	67 e0       	ldi	r22, 0x07	; 7
 5c8:	60 83       	st	Z, r22
 5ca:	31 97       	sbiw	r30, 0x01	; 1
 5cc:	68 e0       	ldi	r22, 0x08	; 8
 5ce:	60 83       	st	Z, r22
 5d0:	31 97       	sbiw	r30, 0x01	; 1
 5d2:	69 e0       	ldi	r22, 0x09	; 9
 5d4:	60 83       	st	Z, r22
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	60 e1       	ldi	r22, 0x10	; 16
 5da:	60 83       	st	Z, r22
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	30 83       	st	Z, r19
 5e0:	31 97       	sbiw	r30, 0x01	; 1
 5e2:	32 e1       	ldi	r19, 0x12	; 18
 5e4:	30 83       	st	Z, r19
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	33 e1       	ldi	r19, 0x13	; 19
 5ea:	30 83       	st	Z, r19
 5ec:	31 97       	sbiw	r30, 0x01	; 1
 5ee:	34 e1       	ldi	r19, 0x14	; 20
 5f0:	30 83       	st	Z, r19
 5f2:	31 97       	sbiw	r30, 0x01	; 1
 5f4:	35 e1       	ldi	r19, 0x15	; 21
 5f6:	30 83       	st	Z, r19
 5f8:	31 97       	sbiw	r30, 0x01	; 1
 5fa:	36 e1       	ldi	r19, 0x16	; 22
 5fc:	30 83       	st	Z, r19
 5fe:	31 97       	sbiw	r30, 0x01	; 1
 600:	37 e1       	ldi	r19, 0x17	; 23
 602:	30 83       	st	Z, r19
 604:	31 97       	sbiw	r30, 0x01	; 1
 606:	38 e1       	ldi	r19, 0x18	; 24
 608:	30 83       	st	Z, r19
 60a:	31 97       	sbiw	r30, 0x01	; 1
 60c:	39 e1       	ldi	r19, 0x19	; 25
 60e:	30 83       	st	Z, r19
 610:	31 97       	sbiw	r30, 0x01	; 1
 612:	30 e2       	ldi	r19, 0x20	; 32
 614:	30 83       	st	Z, r19
 616:	31 97       	sbiw	r30, 0x01	; 1
 618:	31 e2       	ldi	r19, 0x21	; 33
 61a:	30 83       	st	Z, r19
 61c:	31 97       	sbiw	r30, 0x01	; 1
 61e:	20 83       	st	Z, r18
 620:	31 97       	sbiw	r30, 0x01	; 1
 622:	23 e2       	ldi	r18, 0x23	; 35
 624:	20 83       	st	Z, r18
 626:	31 97       	sbiw	r30, 0x01	; 1
 628:	40 83       	st	Z, r20
 62a:	31 97       	sbiw	r30, 0x01	; 1
 62c:	50 83       	st	Z, r21
 62e:	31 97       	sbiw	r30, 0x01	; 1
 630:	26 e2       	ldi	r18, 0x26	; 38
 632:	20 83       	st	Z, r18
 634:	31 97       	sbiw	r30, 0x01	; 1
 636:	27 e2       	ldi	r18, 0x27	; 39
 638:	20 83       	st	Z, r18
 63a:	31 97       	sbiw	r30, 0x01	; 1
 63c:	28 e2       	ldi	r18, 0x28	; 40
 63e:	20 83       	st	Z, r18
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	29 e2       	ldi	r18, 0x29	; 41
 644:	20 83       	st	Z, r18
 646:	31 97       	sbiw	r30, 0x01	; 1
 648:	20 e3       	ldi	r18, 0x30	; 48
 64a:	20 83       	st	Z, r18
 64c:	31 97       	sbiw	r30, 0x01	; 1
 64e:	21 e3       	ldi	r18, 0x31	; 49
 650:	20 83       	st	Z, r18
 652:	86 97       	sbiw	r24, 0x26	; 38
 654:	08 95       	ret

00000656 <xPortStartScheduler>:
 656:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 65a:	8c e7       	ldi	r24, 0x7C	; 124
 65c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 660:	8b e0       	ldi	r24, 0x0B	; 11
 662:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 666:	ef e6       	ldi	r30, 0x6F	; 111
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	82 60       	ori	r24, 0x02	; 2
 66e:	80 83       	st	Z, r24
 670:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
 674:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 678:	cd 91       	ld	r28, X+
 67a:	cd bf       	out	0x3d, r28	; 61
 67c:	dd 91       	ld	r29, X+
 67e:	de bf       	out	0x3e, r29	; 62
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	ff 90       	pop	r15
 6a2:	ef 90       	pop	r14
 6a4:	df 90       	pop	r13
 6a6:	cf 90       	pop	r12
 6a8:	bf 90       	pop	r11
 6aa:	af 90       	pop	r10
 6ac:	9f 90       	pop	r9
 6ae:	8f 90       	pop	r8
 6b0:	7f 90       	pop	r7
 6b2:	6f 90       	pop	r6
 6b4:	5f 90       	pop	r5
 6b6:	4f 90       	pop	r4
 6b8:	3f 90       	pop	r3
 6ba:	2f 90       	pop	r2
 6bc:	1f 90       	pop	r1
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	08 95       	ret
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	08 95       	ret

000006ca <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 6ca:	0f 92       	push	r0
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	f8 94       	cli
 6d0:	0f 92       	push	r0
 6d2:	1f 92       	push	r1
 6d4:	11 24       	eor	r1, r1
 6d6:	2f 92       	push	r2
 6d8:	3f 92       	push	r3
 6da:	4f 92       	push	r4
 6dc:	5f 92       	push	r5
 6de:	6f 92       	push	r6
 6e0:	7f 92       	push	r7
 6e2:	8f 92       	push	r8
 6e4:	9f 92       	push	r9
 6e6:	af 92       	push	r10
 6e8:	bf 92       	push	r11
 6ea:	cf 92       	push	r12
 6ec:	df 92       	push	r13
 6ee:	ef 92       	push	r14
 6f0:	ff 92       	push	r15
 6f2:	0f 93       	push	r16
 6f4:	1f 93       	push	r17
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	6f 93       	push	r22
 700:	7f 93       	push	r23
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
 712:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
 716:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 71a:	0d b6       	in	r0, 0x3d	; 61
 71c:	0d 92       	st	X+, r0
 71e:	0e b6       	in	r0, 0x3e	; 62
 720:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 722:	86 d3       	rcall	.+1804   	; 0xe30 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 724:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
 728:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 72c:	cd 91       	ld	r28, X+
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	dd 91       	ld	r29, X+
 732:	de bf       	out	0x3e, r29	; 62
 734:	ff 91       	pop	r31
 736:	ef 91       	pop	r30
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	7f 91       	pop	r23
 746:	6f 91       	pop	r22
 748:	5f 91       	pop	r21
 74a:	4f 91       	pop	r20
 74c:	3f 91       	pop	r19
 74e:	2f 91       	pop	r18
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	ff 90       	pop	r15
 756:	ef 90       	pop	r14
 758:	df 90       	pop	r13
 75a:	cf 90       	pop	r12
 75c:	bf 90       	pop	r11
 75e:	af 90       	pop	r10
 760:	9f 90       	pop	r9
 762:	8f 90       	pop	r8
 764:	7f 90       	pop	r7
 766:	6f 90       	pop	r6
 768:	5f 90       	pop	r5
 76a:	4f 90       	pop	r4
 76c:	3f 90       	pop	r3
 76e:	2f 90       	pop	r2
 770:	1f 90       	pop	r1
 772:	0f 90       	pop	r0
 774:	0f be       	out	0x3f, r0	; 63
 776:	0f 90       	pop	r0

	asm volatile ( "ret" );
 778:	08 95       	ret

0000077a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 77a:	0f 92       	push	r0
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	f8 94       	cli
 780:	0f 92       	push	r0
 782:	1f 92       	push	r1
 784:	11 24       	eor	r1, r1
 786:	2f 92       	push	r2
 788:	3f 92       	push	r3
 78a:	4f 92       	push	r4
 78c:	5f 92       	push	r5
 78e:	6f 92       	push	r6
 790:	7f 92       	push	r7
 792:	8f 92       	push	r8
 794:	9f 92       	push	r9
 796:	af 92       	push	r10
 798:	bf 92       	push	r11
 79a:	cf 92       	push	r12
 79c:	df 92       	push	r13
 79e:	ef 92       	push	r14
 7a0:	ff 92       	push	r15
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
 7c2:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
 7c6:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 7ca:	0d b6       	in	r0, 0x3d	; 61
 7cc:	0d 92       	st	X+, r0
 7ce:	0e b6       	in	r0, 0x3e	; 62
 7d0:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 7d2:	ee d1       	rcall	.+988    	; 0xbb0 <xTaskIncrementTick>
 7d4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 7d6:	2c d3       	rcall	.+1624   	; 0xe30 <vTaskSwitchContext>
 7d8:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 7dc:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 7e0:	cd 91       	ld	r28, X+
 7e2:	cd bf       	out	0x3d, r28	; 61
 7e4:	dd 91       	ld	r29, X+
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	bf 91       	pop	r27
 7f2:	af 91       	pop	r26
 7f4:	9f 91       	pop	r25
 7f6:	8f 91       	pop	r24
 7f8:	7f 91       	pop	r23
 7fa:	6f 91       	pop	r22
 7fc:	5f 91       	pop	r21
 7fe:	4f 91       	pop	r20
 800:	3f 91       	pop	r19
 802:	2f 91       	pop	r18
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	ff 90       	pop	r15
 80a:	ef 90       	pop	r14
 80c:	df 90       	pop	r13
 80e:	cf 90       	pop	r12
 810:	bf 90       	pop	r11
 812:	af 90       	pop	r10
 814:	9f 90       	pop	r9
 816:	8f 90       	pop	r8
 818:	7f 90       	pop	r7
 81a:	6f 90       	pop	r6
 81c:	5f 90       	pop	r5
 81e:	4f 90       	pop	r4
 820:	3f 90       	pop	r3
 822:	2f 90       	pop	r2
 824:	1f 90       	pop	r1
 826:	0f 90       	pop	r0
 828:	0f be       	out	0x3f, r0	; 63
 82a:	0f 90       	pop	r0
 82c:	08 95       	ret

0000082e <__vector_13>:

	asm volatile ( "ret" );
 82e:	a5 df       	rcall	.-182    	; 0x77a <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 830:	18 95       	reti

00000832 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 832:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 836:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 83a:	80 81       	ld	r24, Z
 83c:	81 11       	cpse	r24, r1
 83e:	07 c0       	rjmp	.+14     	; 0x84e <prvResetNextTaskUnblockTime+0x1c>
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	9f ef       	ldi	r25, 0xFF	; 255
 844:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <xNextTaskUnblockTime+0x1>
 848:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <xNextTaskUnblockTime>
 84c:	08 95       	ret
 84e:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 852:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 856:	05 80       	ldd	r0, Z+5	; 0x05
 858:	f6 81       	ldd	r31, Z+6	; 0x06
 85a:	e0 2d       	mov	r30, r0
 85c:	06 80       	ldd	r0, Z+6	; 0x06
 85e:	f7 81       	ldd	r31, Z+7	; 0x07
 860:	e0 2d       	mov	r30, r0
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	93 81       	ldd	r25, Z+3	; 0x03
 866:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <xNextTaskUnblockTime+0x1>
 86a:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <xNextTaskUnblockTime>
 86e:	08 95       	ret

00000870 <prvIdleTask>:
 870:	0f e0       	ldi	r16, 0x0F	; 15
 872:	17 e0       	ldi	r17, 0x07	; 7
 874:	0f 2e       	mov	r0, r31
 876:	f7 e3       	ldi	r31, 0x37	; 55
 878:	ef 2e       	mov	r14, r31
 87a:	f7 e0       	ldi	r31, 0x07	; 7
 87c:	ff 2e       	mov	r15, r31
 87e:	f0 2d       	mov	r31, r0
 880:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxDeletedTasksWaitingCleanUp>
 884:	88 23       	and	r24, r24
 886:	11 f1       	breq	.+68     	; 0x8cc <prvIdleTask+0x5c>
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	0f 92       	push	r0
 88e:	d8 01       	movw	r26, r16
 890:	15 96       	adiw	r26, 0x05	; 5
 892:	ed 91       	ld	r30, X+
 894:	fc 91       	ld	r31, X
 896:	16 97       	sbiw	r26, 0x06	; 6
 898:	c6 81       	ldd	r28, Z+6	; 0x06
 89a:	d7 81       	ldd	r29, Z+7	; 0x07
 89c:	ce 01       	movw	r24, r28
 89e:	02 96       	adiw	r24, 0x02	; 2
 8a0:	cb dc       	rcall	.-1642   	; 0x238 <uxListRemove>
 8a2:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxCurrentNumberOfTasks>
 8a6:	81 50       	subi	r24, 0x01	; 1
 8a8:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <uxCurrentNumberOfTasks>
 8ac:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxDeletedTasksWaitingCleanUp>
 8b0:	81 50       	subi	r24, 0x01	; 1
 8b2:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxDeletedTasksWaitingCleanUp>
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	8f 89       	ldd	r24, Y+23	; 0x17
 8bc:	98 8d       	ldd	r25, Y+24	; 0x18
 8be:	57 dc       	rcall	.-1874   	; 0x16e <vPortFree>
 8c0:	ce 01       	movw	r24, r28
 8c2:	55 dc       	rcall	.-1878   	; 0x16e <vPortFree>
 8c4:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxDeletedTasksWaitingCleanUp>
 8c8:	81 11       	cpse	r24, r1
 8ca:	de cf       	rjmp	.-68     	; 0x888 <prvIdleTask+0x18>
 8cc:	f7 01       	movw	r30, r14
 8ce:	80 81       	ld	r24, Z
 8d0:	82 30       	cpi	r24, 0x02	; 2
 8d2:	b0 f2       	brcs	.-84     	; 0x880 <prvIdleTask+0x10>
 8d4:	fa de       	rcall	.-524    	; 0x6ca <vPortYield>
 8d6:	d4 cf       	rjmp	.-88     	; 0x880 <prvIdleTask+0x10>

000008d8 <prvAddCurrentTaskToDelayedList>:
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	ec 01       	movw	r28, r24
 8e2:	00 91 0b 07 	lds	r16, 0x070B	; 0x80070b <xTickCount>
 8e6:	10 91 0c 07 	lds	r17, 0x070C	; 0x80070c <xTickCount+0x1>
 8ea:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <pxCurrentTCB>
 8ee:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 8f2:	02 96       	adiw	r24, 0x02	; 2
 8f4:	a1 dc       	rcall	.-1726   	; 0x238 <uxListRemove>
 8f6:	c0 0f       	add	r28, r16
 8f8:	d1 1f       	adc	r29, r17
 8fa:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 8fe:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 902:	d3 83       	std	Z+3, r29	; 0x03
 904:	c2 83       	std	Z+2, r28	; 0x02
 906:	c0 17       	cp	r28, r16
 908:	d1 07       	cpc	r29, r17
 90a:	60 f4       	brcc	.+24     	; 0x924 <prvAddCurrentTaskToDelayedList+0x4c>
 90c:	60 91 5b 07 	lds	r22, 0x075B	; 0x80075b <pxCurrentTCB>
 910:	70 91 5c 07 	lds	r23, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 914:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <pxOverflowDelayedTaskList>
 918:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <pxOverflowDelayedTaskList+0x1>
 91c:	6e 5f       	subi	r22, 0xFE	; 254
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	5a dc       	rcall	.-1868   	; 0x1d6 <vListInsert>
 922:	16 c0       	rjmp	.+44     	; 0x950 <prvAddCurrentTaskToDelayedList+0x78>
 924:	60 91 5b 07 	lds	r22, 0x075B	; 0x80075b <pxCurrentTCB>
 928:	70 91 5c 07 	lds	r23, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 92c:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <pxDelayedTaskList>
 930:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 934:	6e 5f       	subi	r22, 0xFE	; 254
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	4e dc       	rcall	.-1892   	; 0x1d6 <vListInsert>
 93a:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xNextTaskUnblockTime>
 93e:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xNextTaskUnblockTime+0x1>
 942:	c8 17       	cp	r28, r24
 944:	d9 07       	cpc	r29, r25
 946:	20 f4       	brcc	.+8      	; 0x950 <prvAddCurrentTaskToDelayedList+0x78>
 948:	d0 93 04 07 	sts	0x0704, r29	; 0x800704 <xNextTaskUnblockTime+0x1>
 94c:	c0 93 03 07 	sts	0x0703, r28	; 0x800703 <xNextTaskUnblockTime>
 950:	df 91       	pop	r29
 952:	cf 91       	pop	r28
 954:	1f 91       	pop	r17
 956:	0f 91       	pop	r16
 958:	08 95       	ret

0000095a <xTaskCreate>:
 95a:	4f 92       	push	r4
 95c:	5f 92       	push	r5
 95e:	6f 92       	push	r6
 960:	7f 92       	push	r7
 962:	8f 92       	push	r8
 964:	9f 92       	push	r9
 966:	af 92       	push	r10
 968:	bf 92       	push	r11
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	0f 93       	push	r16
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	4c 01       	movw	r8, r24
 97a:	6b 01       	movw	r12, r22
 97c:	5a 01       	movw	r10, r20
 97e:	29 01       	movw	r4, r18
 980:	ca 01       	movw	r24, r20
 982:	c2 db       	rcall	.-2172   	; 0x108 <pvPortMalloc>
 984:	3c 01       	movw	r6, r24
 986:	89 2b       	or	r24, r25
 988:	09 f4       	brne	.+2      	; 0x98c <xTaskCreate+0x32>
 98a:	d3 c0       	rjmp	.+422    	; 0xb32 <xTaskCreate+0x1d8>
 98c:	86 e2       	ldi	r24, 0x26	; 38
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	bb db       	rcall	.-2186   	; 0x108 <pvPortMalloc>
 992:	ec 01       	movw	r28, r24
 994:	89 2b       	or	r24, r25
 996:	59 f0       	breq	.+22     	; 0x9ae <xTaskCreate+0x54>
 998:	78 8e       	std	Y+24, r7	; 0x18
 99a:	6f 8a       	std	Y+23, r6	; 0x17
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	a8 1a       	sub	r10, r24
 9a0:	b1 08       	sbc	r11, r1
 9a2:	a6 0c       	add	r10, r6
 9a4:	b7 1c       	adc	r11, r7
 9a6:	c1 14       	cp	r12, r1
 9a8:	d1 04       	cpc	r13, r1
 9aa:	21 f4       	brne	.+8      	; 0x9b4 <xTaskCreate+0x5a>
 9ac:	1f c0       	rjmp	.+62     	; 0x9ec <xTaskCreate+0x92>
 9ae:	c3 01       	movw	r24, r6
 9b0:	de db       	rcall	.-2116   	; 0x16e <vPortFree>
 9b2:	bf c0       	rjmp	.+382    	; 0xb32 <xTaskCreate+0x1d8>
 9b4:	d6 01       	movw	r26, r12
 9b6:	8c 91       	ld	r24, X
 9b8:	89 8f       	std	Y+25, r24	; 0x19
 9ba:	8c 91       	ld	r24, X
 9bc:	88 23       	and	r24, r24
 9be:	a1 f0       	breq	.+40     	; 0x9e8 <xTaskCreate+0x8e>
 9c0:	ae 01       	movw	r20, r28
 9c2:	46 5e       	subi	r20, 0xE6	; 230
 9c4:	5f 4f       	sbci	r21, 0xFF	; 255
 9c6:	f6 01       	movw	r30, r12
 9c8:	31 96       	adiw	r30, 0x01	; 1
 9ca:	b8 e0       	ldi	r27, 0x08	; 8
 9cc:	cb 0e       	add	r12, r27
 9ce:	d1 1c       	adc	r13, r1
 9d0:	cf 01       	movw	r24, r30
 9d2:	21 91       	ld	r18, Z+
 9d4:	da 01       	movw	r26, r20
 9d6:	2d 93       	st	X+, r18
 9d8:	ad 01       	movw	r20, r26
 9da:	dc 01       	movw	r26, r24
 9dc:	8c 91       	ld	r24, X
 9de:	88 23       	and	r24, r24
 9e0:	19 f0       	breq	.+6      	; 0x9e8 <xTaskCreate+0x8e>
 9e2:	ec 15       	cp	r30, r12
 9e4:	fd 05       	cpc	r31, r13
 9e6:	a1 f7       	brne	.-24     	; 0x9d0 <xTaskCreate+0x76>
 9e8:	18 a2       	std	Y+32, r1	; 0x20
 9ea:	01 c0       	rjmp	.+2      	; 0x9ee <xTaskCreate+0x94>
 9ec:	19 8e       	std	Y+25, r1	; 0x19
 9ee:	04 30       	cpi	r16, 0x04	; 4
 9f0:	08 f0       	brcs	.+2      	; 0x9f4 <xTaskCreate+0x9a>
 9f2:	03 e0       	ldi	r16, 0x03	; 3
 9f4:	0e 8b       	std	Y+22, r16	; 0x16
 9f6:	6e 01       	movw	r12, r28
 9f8:	b2 e0       	ldi	r27, 0x02	; 2
 9fa:	cb 0e       	add	r12, r27
 9fc:	d1 1c       	adc	r13, r1
 9fe:	c6 01       	movw	r24, r12
 a00:	c5 db       	rcall	.-2166   	; 0x18c <vListInitialiseItem>
 a02:	ce 01       	movw	r24, r28
 a04:	0c 96       	adiw	r24, 0x0c	; 12
 a06:	c2 db       	rcall	.-2172   	; 0x18c <vListInitialiseItem>
 a08:	d9 87       	std	Y+9, r29	; 0x09
 a0a:	c8 87       	std	Y+8, r28	; 0x08
 a0c:	84 e0       	ldi	r24, 0x04	; 4
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	80 1b       	sub	r24, r16
 a12:	91 09       	sbc	r25, r1
 a14:	9d 87       	std	Y+13, r25	; 0x0d
 a16:	8c 87       	std	Y+12, r24	; 0x0c
 a18:	db 8b       	std	Y+19, r29	; 0x13
 a1a:	ca 8b       	std	Y+18, r28	; 0x12
 a1c:	19 a2       	std	Y+33, r1	; 0x21
 a1e:	1a a2       	std	Y+34, r1	; 0x22
 a20:	1b a2       	std	Y+35, r1	; 0x23
 a22:	1c a2       	std	Y+36, r1	; 0x24
 a24:	1d a2       	std	Y+37, r1	; 0x25
 a26:	a2 01       	movw	r20, r4
 a28:	b4 01       	movw	r22, r8
 a2a:	c5 01       	movw	r24, r10
 a2c:	a8 dd       	rcall	.-1200   	; 0x57e <pxPortInitialiseStack>
 a2e:	99 83       	std	Y+1, r25	; 0x01
 a30:	88 83       	st	Y, r24
 a32:	e1 14       	cp	r14, r1
 a34:	f1 04       	cpc	r15, r1
 a36:	19 f0       	breq	.+6      	; 0xa3e <xTaskCreate+0xe4>
 a38:	f7 01       	movw	r30, r14
 a3a:	d1 83       	std	Z+1, r29	; 0x01
 a3c:	c0 83       	st	Z, r28
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	f8 94       	cli
 a42:	0f 92       	push	r0
 a44:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxCurrentNumberOfTasks>
 a48:	8f 5f       	subi	r24, 0xFF	; 255
 a4a:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <uxCurrentNumberOfTasks>
 a4e:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <pxCurrentTCB>
 a52:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 a56:	89 2b       	or	r24, r25
 a58:	69 f5       	brne	.+90     	; 0xab4 <xTaskCreate+0x15a>
 a5a:	d0 93 5c 07 	sts	0x075C, r29	; 0x80075c <pxCurrentTCB+0x1>
 a5e:	c0 93 5b 07 	sts	0x075B, r28	; 0x80075b <pxCurrentTCB>
 a62:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxCurrentNumberOfTasks>
 a66:	81 30       	cpi	r24, 0x01	; 1
 a68:	a9 f5       	brne	.+106    	; 0xad4 <xTaskCreate+0x17a>
 a6a:	87 e3       	ldi	r24, 0x37	; 55
 a6c:	97 e0       	ldi	r25, 0x07	; 7
 a6e:	80 db       	rcall	.-2304   	; 0x170 <vListInitialise>
 a70:	80 e4       	ldi	r24, 0x40	; 64
 a72:	97 e0       	ldi	r25, 0x07	; 7
 a74:	7d db       	rcall	.-2310   	; 0x170 <vListInitialise>
 a76:	89 e4       	ldi	r24, 0x49	; 73
 a78:	97 e0       	ldi	r25, 0x07	; 7
 a7a:	7a db       	rcall	.-2316   	; 0x170 <vListInitialise>
 a7c:	82 e5       	ldi	r24, 0x52	; 82
 a7e:	97 e0       	ldi	r25, 0x07	; 7
 a80:	77 db       	rcall	.-2322   	; 0x170 <vListInitialise>
 a82:	8e e2       	ldi	r24, 0x2E	; 46
 a84:	97 e0       	ldi	r25, 0x07	; 7
 a86:	74 db       	rcall	.-2328   	; 0x170 <vListInitialise>
 a88:	85 e2       	ldi	r24, 0x25	; 37
 a8a:	97 e0       	ldi	r25, 0x07	; 7
 a8c:	71 db       	rcall	.-2334   	; 0x170 <vListInitialise>
 a8e:	88 e1       	ldi	r24, 0x18	; 24
 a90:	97 e0       	ldi	r25, 0x07	; 7
 a92:	6e db       	rcall	.-2340   	; 0x170 <vListInitialise>
 a94:	8f e0       	ldi	r24, 0x0F	; 15
 a96:	97 e0       	ldi	r25, 0x07	; 7
 a98:	6b db       	rcall	.-2346   	; 0x170 <vListInitialise>
 a9a:	8e e2       	ldi	r24, 0x2E	; 46
 a9c:	97 e0       	ldi	r25, 0x07	; 7
 a9e:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <pxDelayedTaskList+0x1>
 aa2:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <pxDelayedTaskList>
 aa6:	85 e2       	ldi	r24, 0x25	; 37
 aa8:	97 e0       	ldi	r25, 0x07	; 7
 aaa:	90 93 22 07 	sts	0x0722, r25	; 0x800722 <pxOverflowDelayedTaskList+0x1>
 aae:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <pxOverflowDelayedTaskList>
 ab2:	10 c0       	rjmp	.+32     	; 0xad4 <xTaskCreate+0x17a>
 ab4:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xSchedulerRunning>
 ab8:	81 11       	cpse	r24, r1
 aba:	0c c0       	rjmp	.+24     	; 0xad4 <xTaskCreate+0x17a>
 abc:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 ac0:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 ac4:	96 89       	ldd	r25, Z+22	; 0x16
 ac6:	8e 89       	ldd	r24, Y+22	; 0x16
 ac8:	89 17       	cp	r24, r25
 aca:	20 f0       	brcs	.+8      	; 0xad4 <xTaskCreate+0x17a>
 acc:	d0 93 5c 07 	sts	0x075C, r29	; 0x80075c <pxCurrentTCB+0x1>
 ad0:	c0 93 5b 07 	sts	0x075B, r28	; 0x80075b <pxCurrentTCB>
 ad4:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxTaskNumber>
 ad8:	8f 5f       	subi	r24, 0xFF	; 255
 ada:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxTaskNumber>
 ade:	8e 89       	ldd	r24, Y+22	; 0x16
 ae0:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <uxTopReadyPriority>
 ae4:	98 17       	cp	r25, r24
 ae6:	10 f4       	brcc	.+4      	; 0xaec <xTaskCreate+0x192>
 ae8:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTopReadyPriority>
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	9c 01       	movw	r18, r24
 af0:	22 0f       	add	r18, r18
 af2:	33 1f       	adc	r19, r19
 af4:	22 0f       	add	r18, r18
 af6:	33 1f       	adc	r19, r19
 af8:	22 0f       	add	r18, r18
 afa:	33 1f       	adc	r19, r19
 afc:	82 0f       	add	r24, r18
 afe:	93 1f       	adc	r25, r19
 b00:	b6 01       	movw	r22, r12
 b02:	89 5c       	subi	r24, 0xC9	; 201
 b04:	98 4f       	sbci	r25, 0xF8	; 248
 b06:	46 db       	rcall	.-2420   	; 0x194 <vListInsertEnd>
 b08:	0f 90       	pop	r0
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xSchedulerRunning>
 b10:	88 23       	and	r24, r24
 b12:	59 f0       	breq	.+22     	; 0xb2a <xTaskCreate+0x1d0>
 b14:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 b18:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 b1c:	96 89       	ldd	r25, Z+22	; 0x16
 b1e:	8e 89       	ldd	r24, Y+22	; 0x16
 b20:	98 17       	cp	r25, r24
 b22:	28 f4       	brcc	.+10     	; 0xb2e <xTaskCreate+0x1d4>
 b24:	d2 dd       	rcall	.-1116   	; 0x6ca <vPortYield>
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	05 c0       	rjmp	.+10     	; 0xb34 <xTaskCreate+0x1da>
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <xTaskCreate+0x1da>
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	01 c0       	rjmp	.+2      	; 0xb34 <xTaskCreate+0x1da>
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	df 91       	pop	r29
 b36:	cf 91       	pop	r28
 b38:	0f 91       	pop	r16
 b3a:	ff 90       	pop	r15
 b3c:	ef 90       	pop	r14
 b3e:	df 90       	pop	r13
 b40:	cf 90       	pop	r12
 b42:	bf 90       	pop	r11
 b44:	af 90       	pop	r10
 b46:	9f 90       	pop	r9
 b48:	8f 90       	pop	r8
 b4a:	7f 90       	pop	r7
 b4c:	6f 90       	pop	r6
 b4e:	5f 90       	pop	r5
 b50:	4f 90       	pop	r4
 b52:	08 95       	ret

00000b54 <vTaskStartScheduler>:
 b54:	ef 92       	push	r14
 b56:	ff 92       	push	r15
 b58:	0f 93       	push	r16
 b5a:	0f 2e       	mov	r0, r31
 b5c:	f1 e0       	ldi	r31, 0x01	; 1
 b5e:	ef 2e       	mov	r14, r31
 b60:	f7 e0       	ldi	r31, 0x07	; 7
 b62:	ff 2e       	mov	r15, r31
 b64:	f0 2d       	mov	r31, r0
 b66:	00 e0       	ldi	r16, 0x00	; 0
 b68:	20 e0       	ldi	r18, 0x00	; 0
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	45 e5       	ldi	r20, 0x55	; 85
 b6e:	50 e0       	ldi	r21, 0x00	; 0
 b70:	6b e1       	ldi	r22, 0x1B	; 27
 b72:	71 e0       	ldi	r23, 0x01	; 1
 b74:	88 e3       	ldi	r24, 0x38	; 56
 b76:	94 e0       	ldi	r25, 0x04	; 4
 b78:	f0 de       	rcall	.-544    	; 0x95a <xTaskCreate>
 b7a:	81 30       	cpi	r24, 0x01	; 1
 b7c:	79 f4       	brne	.+30     	; 0xb9c <vTaskStartScheduler+0x48>
 b7e:	f8 94       	cli
 b80:	8f ef       	ldi	r24, 0xFF	; 255
 b82:	9f ef       	ldi	r25, 0xFF	; 255
 b84:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <xNextTaskUnblockTime+0x1>
 b88:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <xNextTaskUnblockTime>
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <xSchedulerRunning>
 b92:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <xTickCount+0x1>
 b96:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <xTickCount>
 b9a:	5d dd       	rcall	.-1350   	; 0x656 <xPortStartScheduler>
 b9c:	0f 91       	pop	r16
 b9e:	ff 90       	pop	r15
 ba0:	ef 90       	pop	r14
 ba2:	08 95       	ret

00000ba4 <vTaskSuspendAll>:
 ba4:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxSchedulerSuspended>
 ba8:	8f 5f       	subi	r24, 0xFF	; 255
 baa:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <uxSchedulerSuspended>
 bae:	08 95       	ret

00000bb0 <xTaskIncrementTick>:
 bb0:	cf 92       	push	r12
 bb2:	df 92       	push	r13
 bb4:	ef 92       	push	r14
 bb6:	ff 92       	push	r15
 bb8:	0f 93       	push	r16
 bba:	1f 93       	push	r17
 bbc:	cf 93       	push	r28
 bbe:	df 93       	push	r29
 bc0:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxSchedulerSuspended>
 bc4:	81 11       	cpse	r24, r1
 bc6:	95 c0       	rjmp	.+298    	; 0xcf2 <xTaskIncrementTick+0x142>
 bc8:	e0 90 0b 07 	lds	r14, 0x070B	; 0x80070b <xTickCount>
 bcc:	f0 90 0c 07 	lds	r15, 0x070C	; 0x80070c <xTickCount+0x1>
 bd0:	8f ef       	ldi	r24, 0xFF	; 255
 bd2:	e8 1a       	sub	r14, r24
 bd4:	f8 0a       	sbc	r15, r24
 bd6:	f0 92 0c 07 	sts	0x070C, r15	; 0x80070c <xTickCount+0x1>
 bda:	e0 92 0b 07 	sts	0x070B, r14	; 0x80070b <xTickCount>
 bde:	e1 14       	cp	r14, r1
 be0:	f1 04       	cpc	r15, r1
 be2:	b1 f4       	brne	.+44     	; 0xc10 <xTaskIncrementTick+0x60>
 be4:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <pxDelayedTaskList>
 be8:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 bec:	20 91 21 07 	lds	r18, 0x0721	; 0x800721 <pxOverflowDelayedTaskList>
 bf0:	30 91 22 07 	lds	r19, 0x0722	; 0x800722 <pxOverflowDelayedTaskList+0x1>
 bf4:	30 93 24 07 	sts	0x0724, r19	; 0x800724 <pxDelayedTaskList+0x1>
 bf8:	20 93 23 07 	sts	0x0723, r18	; 0x800723 <pxDelayedTaskList>
 bfc:	90 93 22 07 	sts	0x0722, r25	; 0x800722 <pxOverflowDelayedTaskList+0x1>
 c00:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <pxOverflowDelayedTaskList>
 c04:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <xNumOfOverflows>
 c08:	8f 5f       	subi	r24, 0xFF	; 255
 c0a:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <xNumOfOverflows>
 c0e:	11 de       	rcall	.-990    	; 0x832 <prvResetNextTaskUnblockTime>
 c10:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xNextTaskUnblockTime>
 c14:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xNextTaskUnblockTime+0x1>
 c18:	e8 16       	cp	r14, r24
 c1a:	f9 06       	cpc	r15, r25
 c1c:	10 f4       	brcc	.+4      	; 0xc22 <xTaskIncrementTick+0x72>
 c1e:	d1 2c       	mov	r13, r1
 c20:	50 c0       	rjmp	.+160    	; 0xcc2 <xTaskIncrementTick+0x112>
 c22:	d1 2c       	mov	r13, r1
 c24:	cc 24       	eor	r12, r12
 c26:	c3 94       	inc	r12
 c28:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 c2c:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 c30:	80 81       	ld	r24, Z
 c32:	81 11       	cpse	r24, r1
 c34:	07 c0       	rjmp	.+14     	; 0xc44 <xTaskIncrementTick+0x94>
 c36:	8f ef       	ldi	r24, 0xFF	; 255
 c38:	9f ef       	ldi	r25, 0xFF	; 255
 c3a:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <xNextTaskUnblockTime+0x1>
 c3e:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <xNextTaskUnblockTime>
 c42:	3f c0       	rjmp	.+126    	; 0xcc2 <xTaskIncrementTick+0x112>
 c44:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 c48:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 c4c:	05 80       	ldd	r0, Z+5	; 0x05
 c4e:	f6 81       	ldd	r31, Z+6	; 0x06
 c50:	e0 2d       	mov	r30, r0
 c52:	c6 81       	ldd	r28, Z+6	; 0x06
 c54:	d7 81       	ldd	r29, Z+7	; 0x07
 c56:	8a 81       	ldd	r24, Y+2	; 0x02
 c58:	9b 81       	ldd	r25, Y+3	; 0x03
 c5a:	e8 16       	cp	r14, r24
 c5c:	f9 06       	cpc	r15, r25
 c5e:	28 f4       	brcc	.+10     	; 0xc6a <xTaskIncrementTick+0xba>
 c60:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <xNextTaskUnblockTime+0x1>
 c64:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <xNextTaskUnblockTime>
 c68:	2c c0       	rjmp	.+88     	; 0xcc2 <xTaskIncrementTick+0x112>
 c6a:	8e 01       	movw	r16, r28
 c6c:	0e 5f       	subi	r16, 0xFE	; 254
 c6e:	1f 4f       	sbci	r17, 0xFF	; 255
 c70:	c8 01       	movw	r24, r16
 c72:	e2 da       	rcall	.-2620   	; 0x238 <uxListRemove>
 c74:	8c 89       	ldd	r24, Y+20	; 0x14
 c76:	9d 89       	ldd	r25, Y+21	; 0x15
 c78:	89 2b       	or	r24, r25
 c7a:	19 f0       	breq	.+6      	; 0xc82 <xTaskIncrementTick+0xd2>
 c7c:	ce 01       	movw	r24, r28
 c7e:	0c 96       	adiw	r24, 0x0c	; 12
 c80:	db da       	rcall	.-2634   	; 0x238 <uxListRemove>
 c82:	8e 89       	ldd	r24, Y+22	; 0x16
 c84:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <uxTopReadyPriority>
 c88:	98 17       	cp	r25, r24
 c8a:	10 f4       	brcc	.+4      	; 0xc90 <xTaskIncrementTick+0xe0>
 c8c:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTopReadyPriority>
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	9c 01       	movw	r18, r24
 c94:	22 0f       	add	r18, r18
 c96:	33 1f       	adc	r19, r19
 c98:	22 0f       	add	r18, r18
 c9a:	33 1f       	adc	r19, r19
 c9c:	22 0f       	add	r18, r18
 c9e:	33 1f       	adc	r19, r19
 ca0:	82 0f       	add	r24, r18
 ca2:	93 1f       	adc	r25, r19
 ca4:	b8 01       	movw	r22, r16
 ca6:	89 5c       	subi	r24, 0xC9	; 201
 ca8:	98 4f       	sbci	r25, 0xF8	; 248
 caa:	74 da       	rcall	.-2840   	; 0x194 <vListInsertEnd>
 cac:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 cb0:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 cb4:	9e 89       	ldd	r25, Y+22	; 0x16
 cb6:	86 89       	ldd	r24, Z+22	; 0x16
 cb8:	98 17       	cp	r25, r24
 cba:	08 f4       	brcc	.+2      	; 0xcbe <xTaskIncrementTick+0x10e>
 cbc:	b5 cf       	rjmp	.-150    	; 0xc28 <xTaskIncrementTick+0x78>
 cbe:	dc 2c       	mov	r13, r12
 cc0:	b3 cf       	rjmp	.-154    	; 0xc28 <xTaskIncrementTick+0x78>
 cc2:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 cc6:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 cca:	86 89       	ldd	r24, Z+22	; 0x16
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	fc 01       	movw	r30, r24
 cd0:	ee 0f       	add	r30, r30
 cd2:	ff 1f       	adc	r31, r31
 cd4:	ee 0f       	add	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	ee 0f       	add	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	8e 0f       	add	r24, r30
 cde:	9f 1f       	adc	r25, r31
 ce0:	fc 01       	movw	r30, r24
 ce2:	e9 5c       	subi	r30, 0xC9	; 201
 ce4:	f8 4f       	sbci	r31, 0xF8	; 248
 ce6:	80 81       	ld	r24, Z
 ce8:	82 30       	cpi	r24, 0x02	; 2
 cea:	48 f0       	brcs	.+18     	; 0xcfe <xTaskIncrementTick+0x14e>
 cec:	dd 24       	eor	r13, r13
 cee:	d3 94       	inc	r13
 cf0:	06 c0       	rjmp	.+12     	; 0xcfe <xTaskIncrementTick+0x14e>
 cf2:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxPendedTicks>
 cf6:	8f 5f       	subi	r24, 0xFF	; 255
 cf8:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <uxPendedTicks>
 cfc:	d1 2c       	mov	r13, r1
 cfe:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xYieldPending>
 d02:	88 23       	and	r24, r24
 d04:	11 f0       	breq	.+4      	; 0xd0a <xTaskIncrementTick+0x15a>
 d06:	dd 24       	eor	r13, r13
 d08:	d3 94       	inc	r13
 d0a:	8d 2d       	mov	r24, r13
 d0c:	df 91       	pop	r29
 d0e:	cf 91       	pop	r28
 d10:	1f 91       	pop	r17
 d12:	0f 91       	pop	r16
 d14:	ff 90       	pop	r15
 d16:	ef 90       	pop	r14
 d18:	df 90       	pop	r13
 d1a:	cf 90       	pop	r12
 d1c:	08 95       	ret

00000d1e <xTaskResumeAll>:
 d1e:	df 92       	push	r13
 d20:	ef 92       	push	r14
 d22:	ff 92       	push	r15
 d24:	0f 93       	push	r16
 d26:	1f 93       	push	r17
 d28:	cf 93       	push	r28
 d2a:	df 93       	push	r29
 d2c:	0f b6       	in	r0, 0x3f	; 63
 d2e:	f8 94       	cli
 d30:	0f 92       	push	r0
 d32:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxSchedulerSuspended>
 d36:	81 50       	subi	r24, 0x01	; 1
 d38:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <uxSchedulerSuspended>
 d3c:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxSchedulerSuspended>
 d40:	81 11       	cpse	r24, r1
 d42:	59 c0       	rjmp	.+178    	; 0xdf6 <xTaskResumeAll+0xd8>
 d44:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxCurrentNumberOfTasks>
 d48:	81 11       	cpse	r24, r1
 d4a:	30 c0       	rjmp	.+96     	; 0xdac <xTaskResumeAll+0x8e>
 d4c:	57 c0       	rjmp	.+174    	; 0xdfc <xTaskResumeAll+0xde>
 d4e:	d7 01       	movw	r26, r14
 d50:	15 96       	adiw	r26, 0x05	; 5
 d52:	ed 91       	ld	r30, X+
 d54:	fc 91       	ld	r31, X
 d56:	16 97       	sbiw	r26, 0x06	; 6
 d58:	c6 81       	ldd	r28, Z+6	; 0x06
 d5a:	d7 81       	ldd	r29, Z+7	; 0x07
 d5c:	ce 01       	movw	r24, r28
 d5e:	0c 96       	adiw	r24, 0x0c	; 12
 d60:	6b da       	rcall	.-2858   	; 0x238 <uxListRemove>
 d62:	8e 01       	movw	r16, r28
 d64:	0e 5f       	subi	r16, 0xFE	; 254
 d66:	1f 4f       	sbci	r17, 0xFF	; 255
 d68:	c8 01       	movw	r24, r16
 d6a:	66 da       	rcall	.-2868   	; 0x238 <uxListRemove>
 d6c:	8e 89       	ldd	r24, Y+22	; 0x16
 d6e:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <uxTopReadyPriority>
 d72:	98 17       	cp	r25, r24
 d74:	10 f4       	brcc	.+4      	; 0xd7a <xTaskResumeAll+0x5c>
 d76:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTopReadyPriority>
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	9c 01       	movw	r18, r24
 d7e:	22 0f       	add	r18, r18
 d80:	33 1f       	adc	r19, r19
 d82:	22 0f       	add	r18, r18
 d84:	33 1f       	adc	r19, r19
 d86:	22 0f       	add	r18, r18
 d88:	33 1f       	adc	r19, r19
 d8a:	82 0f       	add	r24, r18
 d8c:	93 1f       	adc	r25, r19
 d8e:	b8 01       	movw	r22, r16
 d90:	89 5c       	subi	r24, 0xC9	; 201
 d92:	98 4f       	sbci	r25, 0xF8	; 248
 d94:	ff d9       	rcall	.-3074   	; 0x194 <vListInsertEnd>
 d96:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 d9a:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 d9e:	9e 89       	ldd	r25, Y+22	; 0x16
 da0:	86 89       	ldd	r24, Z+22	; 0x16
 da2:	98 17       	cp	r25, r24
 da4:	68 f0       	brcs	.+26     	; 0xdc0 <xTaskResumeAll+0xa2>
 da6:	d0 92 07 07 	sts	0x0707, r13	; 0x800707 <xYieldPending>
 daa:	0a c0       	rjmp	.+20     	; 0xdc0 <xTaskResumeAll+0xa2>
 dac:	c0 e0       	ldi	r28, 0x00	; 0
 dae:	d0 e0       	ldi	r29, 0x00	; 0
 db0:	0f 2e       	mov	r0, r31
 db2:	f8 e1       	ldi	r31, 0x18	; 24
 db4:	ef 2e       	mov	r14, r31
 db6:	f7 e0       	ldi	r31, 0x07	; 7
 db8:	ff 2e       	mov	r15, r31
 dba:	f0 2d       	mov	r31, r0
 dbc:	dd 24       	eor	r13, r13
 dbe:	d3 94       	inc	r13
 dc0:	f7 01       	movw	r30, r14
 dc2:	80 81       	ld	r24, Z
 dc4:	81 11       	cpse	r24, r1
 dc6:	c3 cf       	rjmp	.-122    	; 0xd4e <xTaskResumeAll+0x30>
 dc8:	cd 2b       	or	r28, r29
 dca:	09 f0       	breq	.+2      	; 0xdce <xTaskResumeAll+0xb0>
 dcc:	32 dd       	rcall	.-1436   	; 0x832 <prvResetNextTaskUnblockTime>
 dce:	c0 91 08 07 	lds	r28, 0x0708	; 0x800708 <uxPendedTicks>
 dd2:	cc 23       	and	r28, r28
 dd4:	49 f0       	breq	.+18     	; 0xde8 <xTaskResumeAll+0xca>
 dd6:	d1 e0       	ldi	r29, 0x01	; 1
 dd8:	eb de       	rcall	.-554    	; 0xbb0 <xTaskIncrementTick>
 dda:	81 11       	cpse	r24, r1
 ddc:	d0 93 07 07 	sts	0x0707, r29	; 0x800707 <xYieldPending>
 de0:	c1 50       	subi	r28, 0x01	; 1
 de2:	d1 f7       	brne	.-12     	; 0xdd8 <xTaskResumeAll+0xba>
 de4:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <uxPendedTicks>
 de8:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xYieldPending>
 dec:	88 23       	and	r24, r24
 dee:	29 f0       	breq	.+10     	; 0xdfa <xTaskResumeAll+0xdc>
 df0:	6c dc       	rcall	.-1832   	; 0x6ca <vPortYield>
 df2:	81 e0       	ldi	r24, 0x01	; 1
 df4:	03 c0       	rjmp	.+6      	; 0xdfc <xTaskResumeAll+0xde>
 df6:	80 e0       	ldi	r24, 0x00	; 0
 df8:	01 c0       	rjmp	.+2      	; 0xdfc <xTaskResumeAll+0xde>
 dfa:	80 e0       	ldi	r24, 0x00	; 0
 dfc:	0f 90       	pop	r0
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	df 91       	pop	r29
 e02:	cf 91       	pop	r28
 e04:	1f 91       	pop	r17
 e06:	0f 91       	pop	r16
 e08:	ff 90       	pop	r15
 e0a:	ef 90       	pop	r14
 e0c:	df 90       	pop	r13
 e0e:	08 95       	ret

00000e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 e10:	cf 93       	push	r28
 e12:	df 93       	push	r29
 e14:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 e16:	89 2b       	or	r24, r25
 e18:	39 f0       	breq	.+14     	; 0xe28 <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 e1a:	c4 de       	rcall	.-632    	; 0xba4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 e1c:	60 e0       	ldi	r22, 0x00	; 0
 e1e:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 e20:	5b dd       	rcall	.-1354   	; 0x8d8 <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 e22:	7d df       	rcall	.-262    	; 0xd1e <xTaskResumeAll>
 e24:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 e26:	01 c0       	rjmp	.+2      	; 0xe2a <vTaskDelay+0x1a>
 e28:	50 dc       	rcall	.-1888   	; 0x6ca <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 e2a:	df 91       	pop	r29
 e2c:	cf 91       	pop	r28
 e2e:	08 95       	ret

00000e30 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 e30:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxSchedulerSuspended>
 e34:	88 23       	and	r24, r24
 e36:	21 f0       	breq	.+8      	; 0xe40 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 e38:	81 e0       	ldi	r24, 0x01	; 1
 e3a:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xYieldPending>
 e3e:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 e40:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 e44:	20 91 0a 07 	lds	r18, 0x070A	; 0x80070a <uxTopReadyPriority>
 e48:	82 2f       	mov	r24, r18
 e4a:	90 e0       	ldi	r25, 0x00	; 0
 e4c:	fc 01       	movw	r30, r24
 e4e:	ee 0f       	add	r30, r30
 e50:	ff 1f       	adc	r31, r31
 e52:	ee 0f       	add	r30, r30
 e54:	ff 1f       	adc	r31, r31
 e56:	ee 0f       	add	r30, r30
 e58:	ff 1f       	adc	r31, r31
 e5a:	e8 0f       	add	r30, r24
 e5c:	f9 1f       	adc	r31, r25
 e5e:	e9 5c       	subi	r30, 0xC9	; 201
 e60:	f8 4f       	sbci	r31, 0xF8	; 248
 e62:	30 81       	ld	r19, Z
 e64:	31 11       	cpse	r19, r1
 e66:	11 c0       	rjmp	.+34     	; 0xe8a <vTaskSwitchContext+0x5a>
 e68:	21 50       	subi	r18, 0x01	; 1
 e6a:	82 2f       	mov	r24, r18
 e6c:	90 e0       	ldi	r25, 0x00	; 0
 e6e:	fc 01       	movw	r30, r24
 e70:	ee 0f       	add	r30, r30
 e72:	ff 1f       	adc	r31, r31
 e74:	ee 0f       	add	r30, r30
 e76:	ff 1f       	adc	r31, r31
 e78:	ee 0f       	add	r30, r30
 e7a:	ff 1f       	adc	r31, r31
 e7c:	e8 0f       	add	r30, r24
 e7e:	f9 1f       	adc	r31, r25
 e80:	e9 5c       	subi	r30, 0xC9	; 201
 e82:	f8 4f       	sbci	r31, 0xF8	; 248
 e84:	30 81       	ld	r19, Z
 e86:	33 23       	and	r19, r19
 e88:	79 f3       	breq	.-34     	; 0xe68 <vTaskSwitchContext+0x38>
 e8a:	ac 01       	movw	r20, r24
 e8c:	44 0f       	add	r20, r20
 e8e:	55 1f       	adc	r21, r21
 e90:	44 0f       	add	r20, r20
 e92:	55 1f       	adc	r21, r21
 e94:	44 0f       	add	r20, r20
 e96:	55 1f       	adc	r21, r21
 e98:	48 0f       	add	r20, r24
 e9a:	59 1f       	adc	r21, r25
 e9c:	da 01       	movw	r26, r20
 e9e:	a9 5c       	subi	r26, 0xC9	; 201
 ea0:	b8 4f       	sbci	r27, 0xF8	; 248
 ea2:	11 96       	adiw	r26, 0x01	; 1
 ea4:	ed 91       	ld	r30, X+
 ea6:	fc 91       	ld	r31, X
 ea8:	12 97       	sbiw	r26, 0x02	; 2
 eaa:	02 80       	ldd	r0, Z+2	; 0x02
 eac:	f3 81       	ldd	r31, Z+3	; 0x03
 eae:	e0 2d       	mov	r30, r0
 eb0:	12 96       	adiw	r26, 0x02	; 2
 eb2:	fc 93       	st	X, r31
 eb4:	ee 93       	st	-X, r30
 eb6:	11 97       	sbiw	r26, 0x01	; 1
 eb8:	46 5c       	subi	r20, 0xC6	; 198
 eba:	58 4f       	sbci	r21, 0xF8	; 248
 ebc:	e4 17       	cp	r30, r20
 ebe:	f5 07       	cpc	r31, r21
 ec0:	29 f4       	brne	.+10     	; 0xecc <vTaskSwitchContext+0x9c>
 ec2:	42 81       	ldd	r20, Z+2	; 0x02
 ec4:	53 81       	ldd	r21, Z+3	; 0x03
 ec6:	fd 01       	movw	r30, r26
 ec8:	52 83       	std	Z+2, r21	; 0x02
 eca:	41 83       	std	Z+1, r20	; 0x01
 ecc:	fc 01       	movw	r30, r24
 ece:	ee 0f       	add	r30, r30
 ed0:	ff 1f       	adc	r31, r31
 ed2:	ee 0f       	add	r30, r30
 ed4:	ff 1f       	adc	r31, r31
 ed6:	ee 0f       	add	r30, r30
 ed8:	ff 1f       	adc	r31, r31
 eda:	8e 0f       	add	r24, r30
 edc:	9f 1f       	adc	r25, r31
 ede:	fc 01       	movw	r30, r24
 ee0:	e9 5c       	subi	r30, 0xC9	; 201
 ee2:	f8 4f       	sbci	r31, 0xF8	; 248
 ee4:	01 80       	ldd	r0, Z+1	; 0x01
 ee6:	f2 81       	ldd	r31, Z+2	; 0x02
 ee8:	e0 2d       	mov	r30, r0
 eea:	86 81       	ldd	r24, Z+6	; 0x06
 eec:	97 81       	ldd	r25, Z+7	; 0x07
 eee:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <pxCurrentTCB+0x1>
 ef2:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <pxCurrentTCB>
 ef6:	20 93 0a 07 	sts	0x070A, r18	; 0x80070a <uxTopReadyPriority>
 efa:	08 95       	ret

00000efc <__tablejump2__>:
 efc:	ee 0f       	add	r30, r30
 efe:	ff 1f       	adc	r31, r31
 f00:	00 24       	eor	r0, r0
 f02:	00 1c       	adc	r0, r0
 f04:	0b be       	out	0x3b, r0	; 59
 f06:	07 90       	elpm	r0, Z+
 f08:	f6 91       	elpm	r31, Z
 f0a:	e0 2d       	mov	r30, r0
 f0c:	09 94       	ijmp

00000f0e <_exit>:
 f0e:	f8 94       	cli

00000f10 <__stop_program>:
 f10:	ff cf       	rjmp	.-2      	; 0xf10 <__stop_program>

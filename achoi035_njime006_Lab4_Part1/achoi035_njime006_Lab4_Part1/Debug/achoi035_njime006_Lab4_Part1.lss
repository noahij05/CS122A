
achoi035_njime006_Lab4_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c5e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063e  00800110  00800110  00000d02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028aa  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  00003836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000172a  00000000  00000000  00004728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f81  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  00007389  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000927d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ab c2       	rjmp	.+1366   	; 0x58c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	43 d0       	rcall	.+134    	; 0x14a <main>
  c4:	ca c5       	rjmp	.+2964   	; 0xc5a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LEDS_Tick>:
	led_state = INIT;
}

void LEDS_Tick(){
	//Actions
	switch(led_state){
  c8:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	31 f0       	breq	.+12     	; 0xdc <LEDS_Tick+0x14>
  d0:	18 f0       	brcs	.+6      	; 0xd8 <LEDS_Tick+0x10>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	31 f0       	breq	.+12     	; 0xe2 <LEDS_Tick+0x1a>
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <LEDS_Tick+0x1e>
		case INIT:
            PORTD = 0;
  d8:	1b b8       	out	0x0b, r1	; 11
            break;
  da:	06 c0       	rjmp	.+12     	; 0xe8 <LEDS_Tick+0x20>
		case L0:
            PORTD = 21;
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	8b b9       	out	0x0b, r24	; 11
            break;
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <LEDS_Tick+0x20>
		case L2:
            PORTD = 0;
  e2:	1b b8       	out	0x0b, r1	; 11
            break;
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <LEDS_Tick+0x20>
		/*case L4:
            PORTD = 16;
            break;*/
		default:
            PORTD = 0;
  e6:	1b b8       	out	0x0b, r1	; 11
            break;
	}
	//Transitions
	switch(led_state){
  e8:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	41 f0       	breq	.+16     	; 0x100 <LEDS_Tick+0x38>
  f0:	18 f0       	brcs	.+6      	; 0xf8 <LEDS_Tick+0x30>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	49 f0       	breq	.+18     	; 0x108 <LEDS_Tick+0x40>
  f6:	0c c0       	rjmp	.+24     	; 0x110 <LEDS_Tick+0x48>
		case INIT:
			led_state = L0;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
            break;
  fe:	08 95       	ret
		case L0:
			led_state = L2;
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
            break;
 106:	08 95       	ret
		
		case L2:
			led_state = L0;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
            break;
 10e:	08 95       	ret
		/*	
		case L4:
			led_state = L0;
            break;*/
		default:
			led_state = INIT;
 110:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
 114:	08 95       	ret

00000116 <LedSecTask>:
#include "task.h" 
#include "croutine.h" 
enum LEDState {INIT,L0,L2} led_state;

void LEDS_Init(){
	led_state = INIT;
 116:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
}

void LedSecTask() {
    LEDS_Init();
    for(;;) { 	
        LEDS_Tick();
 11a:	d6 df       	rcall	.-84     	; 0xc8 <LEDS_Tick>
        vTaskDelay(1000); 
 11c:	88 ee       	ldi	r24, 0xE8	; 232
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	26 d5       	rcall	.+2636   	; 0xb6e <vTaskDelay>
 122:	fb cf       	rjmp	.-10     	; 0x11a <LedSecTask+0x4>

00000124 <StartSecPulse>:
    } 
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
    xTaskCreate(LedSecTask, 
 12a:	e1 2c       	mov	r14, r1
 12c:	f1 2c       	mov	r15, r1
 12e:	08 2f       	mov	r16, r24
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	45 e5       	ldi	r20, 0x55	; 85
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	71 e0       	ldi	r23, 0x01	; 1
 13c:	8b e8       	ldi	r24, 0x8B	; 139
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	bb d2       	rcall	.+1398   	; 0x6b8 <xTaskCreate>
            (signed portCHAR *)"LedSecTask", 
            configMINIMAL_STACK_SIZE, 
            NULL, 
            Priority, 
            NULL );
}	
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	08 95       	ret

0000014a <main>:
 
int main(void) { 
    DDRA = 0x00; PORTA=0xFF;
 14a:	11 b8       	out	0x01, r1	; 1
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	82 b9       	out	0x02, r24	; 2
    DDRD = 0xFF;
 150:	8a b9       	out	0x0a, r24	; 10
    //Start Tasks  
    StartSecPulse(1);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	e7 df       	rcall	.-50     	; 0x124 <StartSecPulse>
    //RunSchedular 
    vTaskStartScheduler(); 
 156:	ad d3       	rcall	.+1882   	; 0x8b2 <vTaskStartScheduler>
 158:	80 e0       	ldi	r24, 0x00	; 0
    return 0; 
}
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret

0000015e <pvPortMalloc>:
 15e:	cf 93       	push	r28
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
 164:	ce d3       	rcall	.+1948   	; 0x902 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 166:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 16a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 16e:	89 2b       	or	r24, r25
 170:	31 f4       	brne	.+12     	; 0x17e <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 172:	85 e1       	ldi	r24, 0x15	; 21
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 17a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 17e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
 182:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
 186:	c9 01       	movw	r24, r18
 188:	8c 0f       	add	r24, r28
 18a:	9d 1f       	adc	r25, r29
 18c:	8b 3d       	cpi	r24, 0xDB	; 219
 18e:	45 e0       	ldi	r20, 0x05	; 5
 190:	94 07       	cpc	r25, r20
 192:	70 f4       	brcc	.+28     	; 0x1b0 <pvPortMalloc+0x52>
 194:	28 17       	cp	r18, r24
 196:	39 07       	cpc	r19, r25
 198:	70 f4       	brcc	.+28     	; 0x1b6 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 19a:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 19e:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 1a2:	c2 0f       	add	r28, r18
 1a4:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 1a6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 1aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <pvPortMalloc+0x5c>
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
 1ba:	60 d4       	rcall	.+2240   	; 0xa7c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 1bc:	ce 01       	movw	r24, r28
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 1c4:	08 95       	ret

000001c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 1c6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1c8:	03 96       	adiw	r24, 0x03	; 3
 1ca:	92 83       	std	Z+2, r25	; 0x02
 1cc:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	3f ef       	ldi	r19, 0xFF	; 255
 1d2:	34 83       	std	Z+4, r19	; 0x04
 1d4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1d6:	96 83       	std	Z+6, r25	; 0x06
 1d8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1da:	90 87       	std	Z+8, r25	; 0x08
 1dc:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 1de:	10 82       	st	Z, r1
 1e0:	08 95       	ret

000001e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 1e2:	fc 01       	movw	r30, r24
 1e4:	11 86       	std	Z+9, r1	; 0x09
 1e6:	10 86       	std	Z+8, r1	; 0x08
 1e8:	08 95       	ret

000001ea <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	9c 01       	movw	r18, r24
 1f0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 1f2:	dc 01       	movw	r26, r24
 1f4:	11 96       	adiw	r26, 0x01	; 1
 1f6:	cd 91       	ld	r28, X+
 1f8:	dc 91       	ld	r29, X
 1fa:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 1fc:	d3 83       	std	Z+3, r29	; 0x03
 1fe:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 200:	8c 81       	ldd	r24, Y+4	; 0x04
 202:	9d 81       	ldd	r25, Y+5	; 0x05
 204:	95 83       	std	Z+5, r25	; 0x05
 206:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 208:	8c 81       	ldd	r24, Y+4	; 0x04
 20a:	9d 81       	ldd	r25, Y+5	; 0x05
 20c:	dc 01       	movw	r26, r24
 20e:	13 96       	adiw	r26, 0x03	; 3
 210:	7c 93       	st	X, r23
 212:	6e 93       	st	-X, r22
 214:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 216:	7d 83       	std	Y+5, r23	; 0x05
 218:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 21a:	31 87       	std	Z+9, r19	; 0x09
 21c:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 21e:	f9 01       	movw	r30, r18
 220:	80 81       	ld	r24, Z
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 83       	st	Z, r24
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 232:	48 81       	ld	r20, Y
 234:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 236:	4f 3f       	cpi	r20, 0xFF	; 255
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	52 07       	cpc	r21, r18
 23c:	21 f4       	brne	.+8      	; 0x246 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 23e:	fc 01       	movw	r30, r24
 240:	a7 81       	ldd	r26, Z+7	; 0x07
 242:	b0 85       	ldd	r27, Z+8	; 0x08
 244:	0d c0       	rjmp	.+26     	; 0x260 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 246:	dc 01       	movw	r26, r24
 248:	13 96       	adiw	r26, 0x03	; 3
 24a:	01 c0       	rjmp	.+2      	; 0x24e <vListInsert+0x22>
 24c:	df 01       	movw	r26, r30
 24e:	12 96       	adiw	r26, 0x02	; 2
 250:	ed 91       	ld	r30, X+
 252:	fc 91       	ld	r31, X
 254:	13 97       	sbiw	r26, 0x03	; 3
 256:	20 81       	ld	r18, Z
 258:	31 81       	ldd	r19, Z+1	; 0x01
 25a:	42 17       	cp	r20, r18
 25c:	53 07       	cpc	r21, r19
 25e:	b0 f7       	brcc	.-20     	; 0x24c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 260:	12 96       	adiw	r26, 0x02	; 2
 262:	ed 91       	ld	r30, X+
 264:	fc 91       	ld	r31, X
 266:	13 97       	sbiw	r26, 0x03	; 3
 268:	fb 83       	std	Y+3, r31	; 0x03
 26a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 26c:	d5 83       	std	Z+5, r29	; 0x05
 26e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 270:	bd 83       	std	Y+5, r27	; 0x05
 272:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 274:	13 96       	adiw	r26, 0x03	; 3
 276:	dc 93       	st	X, r29
 278:	ce 93       	st	-X, r28
 27a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 27c:	99 87       	std	Y+9, r25	; 0x09
 27e:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 280:	fc 01       	movw	r30, r24
 282:	20 81       	ld	r18, Z
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	20 83       	st	Z, r18
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 294:	a0 85       	ldd	r26, Z+8	; 0x08
 296:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 298:	c2 81       	ldd	r28, Z+2	; 0x02
 29a:	d3 81       	ldd	r29, Z+3	; 0x03
 29c:	84 81       	ldd	r24, Z+4	; 0x04
 29e:	95 81       	ldd	r25, Z+5	; 0x05
 2a0:	9d 83       	std	Y+5, r25	; 0x05
 2a2:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 2a4:	c4 81       	ldd	r28, Z+4	; 0x04
 2a6:	d5 81       	ldd	r29, Z+5	; 0x05
 2a8:	82 81       	ldd	r24, Z+2	; 0x02
 2aa:	93 81       	ldd	r25, Z+3	; 0x03
 2ac:	9b 83       	std	Y+3, r25	; 0x03
 2ae:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 2b0:	11 96       	adiw	r26, 0x01	; 1
 2b2:	8d 91       	ld	r24, X+
 2b4:	9c 91       	ld	r25, X
 2b6:	12 97       	sbiw	r26, 0x02	; 2
 2b8:	e8 17       	cp	r30, r24
 2ba:	f9 07       	cpc	r31, r25
 2bc:	31 f4       	brne	.+12     	; 0x2ca <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 2be:	84 81       	ldd	r24, Z+4	; 0x04
 2c0:	95 81       	ldd	r25, Z+5	; 0x05
 2c2:	12 96       	adiw	r26, 0x02	; 2
 2c4:	9c 93       	st	X, r25
 2c6:	8e 93       	st	-X, r24
 2c8:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 2ca:	11 86       	std	Z+9, r1	; 0x09
 2cc:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 2ce:	8c 91       	ld	r24, X
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 2d4:	8c 91       	ld	r24, X
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2dc:	31 e1       	ldi	r19, 0x11	; 17
 2de:	fc 01       	movw	r30, r24
 2e0:	30 83       	st	Z, r19
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	22 e2       	ldi	r18, 0x22	; 34
 2e6:	20 83       	st	Z, r18
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	a3 e3       	ldi	r26, 0x33	; 51
 2ec:	a0 83       	st	Z, r26
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	60 83       	st	Z, r22
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	70 83       	st	Z, r23
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	10 82       	st	Z, r1
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	60 e8       	ldi	r22, 0x80	; 128
 2fe:	60 83       	st	Z, r22
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	10 82       	st	Z, r1
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	60 83       	st	Z, r22
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	60 83       	st	Z, r22
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	60 83       	st	Z, r22
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	65 e0       	ldi	r22, 0x05	; 5
 31a:	60 83       	st	Z, r22
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	66 e0       	ldi	r22, 0x06	; 6
 320:	60 83       	st	Z, r22
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	60 83       	st	Z, r22
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	68 e0       	ldi	r22, 0x08	; 8
 32c:	60 83       	st	Z, r22
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	69 e0       	ldi	r22, 0x09	; 9
 332:	60 83       	st	Z, r22
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	60 e1       	ldi	r22, 0x10	; 16
 338:	60 83       	st	Z, r22
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	30 83       	st	Z, r19
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	32 e1       	ldi	r19, 0x12	; 18
 342:	30 83       	st	Z, r19
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	33 e1       	ldi	r19, 0x13	; 19
 348:	30 83       	st	Z, r19
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	34 e1       	ldi	r19, 0x14	; 20
 34e:	30 83       	st	Z, r19
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	35 e1       	ldi	r19, 0x15	; 21
 354:	30 83       	st	Z, r19
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	36 e1       	ldi	r19, 0x16	; 22
 35a:	30 83       	st	Z, r19
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	37 e1       	ldi	r19, 0x17	; 23
 360:	30 83       	st	Z, r19
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	38 e1       	ldi	r19, 0x18	; 24
 366:	30 83       	st	Z, r19
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	39 e1       	ldi	r19, 0x19	; 25
 36c:	30 83       	st	Z, r19
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	30 e2       	ldi	r19, 0x20	; 32
 372:	30 83       	st	Z, r19
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	31 e2       	ldi	r19, 0x21	; 33
 378:	30 83       	st	Z, r19
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	20 83       	st	Z, r18
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	23 e2       	ldi	r18, 0x23	; 35
 382:	20 83       	st	Z, r18
 384:	31 97       	sbiw	r30, 0x01	; 1
 386:	40 83       	st	Z, r20
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	50 83       	st	Z, r21
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	26 e2       	ldi	r18, 0x26	; 38
 390:	20 83       	st	Z, r18
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	27 e2       	ldi	r18, 0x27	; 39
 396:	20 83       	st	Z, r18
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	28 e2       	ldi	r18, 0x28	; 40
 39c:	20 83       	st	Z, r18
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	29 e2       	ldi	r18, 0x29	; 41
 3a2:	20 83       	st	Z, r18
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	20 e3       	ldi	r18, 0x30	; 48
 3a8:	20 83       	st	Z, r18
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	21 e3       	ldi	r18, 0x31	; 49
 3ae:	20 83       	st	Z, r18
 3b0:	86 97       	sbiw	r24, 0x26	; 38
 3b2:	08 95       	ret

000003b4 <xPortStartScheduler>:
 3b4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3b8:	8c e7       	ldi	r24, 0x7C	; 124
 3ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3be:	8b e0       	ldi	r24, 0x0B	; 11
 3c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3c4:	ef e6       	ldi	r30, 0x6F	; 111
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	80 83       	st	Z, r24
 3ce:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 3d2:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 3d6:	cd 91       	ld	r28, X+
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	dd 91       	ld	r29, X+
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	bf 90       	pop	r11
 408:	af 90       	pop	r10
 40a:	9f 90       	pop	r9
 40c:	8f 90       	pop	r8
 40e:	7f 90       	pop	r7
 410:	6f 90       	pop	r6
 412:	5f 90       	pop	r5
 414:	4f 90       	pop	r4
 416:	3f 90       	pop	r3
 418:	2f 90       	pop	r2
 41a:	1f 90       	pop	r1
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	08 95       	ret
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret

00000428 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	0f 92       	push	r0
 430:	1f 92       	push	r1
 432:	11 24       	eor	r1, r1
 434:	2f 92       	push	r2
 436:	3f 92       	push	r3
 438:	4f 92       	push	r4
 43a:	5f 92       	push	r5
 43c:	6f 92       	push	r6
 43e:	7f 92       	push	r7
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
 470:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 474:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 478:	0d b6       	in	r0, 0x3d	; 61
 47a:	0d 92       	st	X+, r0
 47c:	0e b6       	in	r0, 0x3e	; 62
 47e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 480:	86 d3       	rcall	.+1804   	; 0xb8e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 482:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 486:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 48a:	cd 91       	ld	r28, X+
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	dd 91       	ld	r29, X+
 490:	de bf       	out	0x3e, r29	; 62
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	ff 90       	pop	r15
 4b4:	ef 90       	pop	r14
 4b6:	df 90       	pop	r13
 4b8:	cf 90       	pop	r12
 4ba:	bf 90       	pop	r11
 4bc:	af 90       	pop	r10
 4be:	9f 90       	pop	r9
 4c0:	8f 90       	pop	r8
 4c2:	7f 90       	pop	r7
 4c4:	6f 90       	pop	r6
 4c6:	5f 90       	pop	r5
 4c8:	4f 90       	pop	r4
 4ca:	3f 90       	pop	r3
 4cc:	2f 90       	pop	r2
 4ce:	1f 90       	pop	r1
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4d6:	08 95       	ret

000004d8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	0f 92       	push	r0
 4e0:	1f 92       	push	r1
 4e2:	11 24       	eor	r1, r1
 4e4:	2f 92       	push	r2
 4e6:	3f 92       	push	r3
 4e8:	4f 92       	push	r4
 4ea:	5f 92       	push	r5
 4ec:	6f 92       	push	r6
 4ee:	7f 92       	push	r7
 4f0:	8f 92       	push	r8
 4f2:	9f 92       	push	r9
 4f4:	af 92       	push	r10
 4f6:	bf 92       	push	r11
 4f8:	cf 92       	push	r12
 4fa:	df 92       	push	r13
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
 520:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 524:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 528:	0d b6       	in	r0, 0x3d	; 61
 52a:	0d 92       	st	X+, r0
 52c:	0e b6       	in	r0, 0x3e	; 62
 52e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 530:	ee d1       	rcall	.+988    	; 0x90e <xTaskIncrementTick>
 532:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 534:	2c d3       	rcall	.+1624   	; 0xb8e <vTaskSwitchContext>
 536:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 53a:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 53e:	cd 91       	ld	r28, X+
 540:	cd bf       	out	0x3d, r28	; 61
 542:	dd 91       	ld	r29, X+
 544:	de bf       	out	0x3e, r29	; 62
 546:	ff 91       	pop	r31
 548:	ef 91       	pop	r30
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	bf 91       	pop	r27
 550:	af 91       	pop	r26
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	7f 91       	pop	r23
 558:	6f 91       	pop	r22
 55a:	5f 91       	pop	r21
 55c:	4f 91       	pop	r20
 55e:	3f 91       	pop	r19
 560:	2f 91       	pop	r18
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	df 90       	pop	r13
 56c:	cf 90       	pop	r12
 56e:	bf 90       	pop	r11
 570:	af 90       	pop	r10
 572:	9f 90       	pop	r9
 574:	8f 90       	pop	r8
 576:	7f 90       	pop	r7
 578:	6f 90       	pop	r6
 57a:	5f 90       	pop	r5
 57c:	4f 90       	pop	r4
 57e:	3f 90       	pop	r3
 580:	2f 90       	pop	r2
 582:	1f 90       	pop	r1
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	08 95       	ret

0000058c <__vector_13>:

	asm volatile ( "ret" );
 58c:	a5 df       	rcall	.-182    	; 0x4d8 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 58e:	18 95       	reti

00000590 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 590:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 594:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 598:	80 81       	ld	r24, Z
 59a:	81 11       	cpse	r24, r1
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <prvResetNextTaskUnblockTime+0x1c>
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	9f ef       	ldi	r25, 0xFF	; 255
 5a2:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5a6:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5aa:	08 95       	ret
 5ac:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5b0:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5b4:	05 80       	ldd	r0, Z+5	; 0x05
 5b6:	f6 81       	ldd	r31, Z+6	; 0x06
 5b8:	e0 2d       	mov	r30, r0
 5ba:	06 80       	ldd	r0, Z+6	; 0x06
 5bc:	f7 81       	ldd	r31, Z+7	; 0x07
 5be:	e0 2d       	mov	r30, r0
 5c0:	82 81       	ldd	r24, Z+2	; 0x02
 5c2:	93 81       	ldd	r25, Z+3	; 0x03
 5c4:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5c8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5cc:	08 95       	ret

000005ce <prvIdleTask>:
 5ce:	0f ef       	ldi	r16, 0xFF	; 255
 5d0:	16 e0       	ldi	r17, 0x06	; 6
 5d2:	0f 2e       	mov	r0, r31
 5d4:	f7 e2       	ldi	r31, 0x27	; 39
 5d6:	ef 2e       	mov	r14, r31
 5d8:	f7 e0       	ldi	r31, 0x07	; 7
 5da:	ff 2e       	mov	r15, r31
 5dc:	f0 2d       	mov	r31, r0
 5de:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5e2:	88 23       	and	r24, r24
 5e4:	11 f1       	breq	.+68     	; 0x62a <prvIdleTask+0x5c>
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	0f 92       	push	r0
 5ec:	d8 01       	movw	r26, r16
 5ee:	15 96       	adiw	r26, 0x05	; 5
 5f0:	ed 91       	ld	r30, X+
 5f2:	fc 91       	ld	r31, X
 5f4:	16 97       	sbiw	r26, 0x06	; 6
 5f6:	c6 81       	ldd	r28, Z+6	; 0x06
 5f8:	d7 81       	ldd	r29, Z+7	; 0x07
 5fa:	ce 01       	movw	r24, r28
 5fc:	02 96       	adiw	r24, 0x02	; 2
 5fe:	47 de       	rcall	.-882    	; 0x28e <uxListRemove>
 600:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 604:	81 50       	subi	r24, 0x01	; 1
 606:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 60a:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 60e:	81 50       	subi	r24, 0x01	; 1
 610:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	8f 89       	ldd	r24, Y+23	; 0x17
 61a:	98 8d       	ldd	r25, Y+24	; 0x18
 61c:	d3 dd       	rcall	.-1114   	; 0x1c4 <vPortFree>
 61e:	ce 01       	movw	r24, r28
 620:	d1 dd       	rcall	.-1118   	; 0x1c4 <vPortFree>
 622:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 626:	81 11       	cpse	r24, r1
 628:	de cf       	rjmp	.-68     	; 0x5e6 <prvIdleTask+0x18>
 62a:	f7 01       	movw	r30, r14
 62c:	80 81       	ld	r24, Z
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	b0 f2       	brcs	.-84     	; 0x5de <prvIdleTask+0x10>
 632:	fa de       	rcall	.-524    	; 0x428 <vPortYield>
 634:	d4 cf       	rjmp	.-88     	; 0x5de <prvIdleTask+0x10>

00000636 <prvAddCurrentTaskToDelayedList>:
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	ec 01       	movw	r28, r24
 640:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 644:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 648:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 64c:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 650:	02 96       	adiw	r24, 0x02	; 2
 652:	1d de       	rcall	.-966    	; 0x28e <uxListRemove>
 654:	c0 0f       	add	r28, r16
 656:	d1 1f       	adc	r29, r17
 658:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 65c:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 660:	d3 83       	std	Z+3, r29	; 0x03
 662:	c2 83       	std	Z+2, r28	; 0x02
 664:	c0 17       	cp	r28, r16
 666:	d1 07       	cpc	r29, r17
 668:	60 f4       	brcc	.+24     	; 0x682 <prvAddCurrentTaskToDelayedList+0x4c>
 66a:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 66e:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 672:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 676:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 67a:	6e 5f       	subi	r22, 0xFE	; 254
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	d6 dd       	rcall	.-1108   	; 0x22c <vListInsert>
 680:	16 c0       	rjmp	.+44     	; 0x6ae <prvAddCurrentTaskToDelayedList+0x78>
 682:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 686:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 68a:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 68e:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 692:	6e 5f       	subi	r22, 0xFE	; 254
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	ca dd       	rcall	.-1132   	; 0x22c <vListInsert>
 698:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 69c:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6a0:	c8 17       	cp	r28, r24
 6a2:	d9 07       	cpc	r29, r25
 6a4:	20 f4       	brcc	.+8      	; 0x6ae <prvAddCurrentTaskToDelayedList+0x78>
 6a6:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6aa:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <xTaskCreate>:
 6b8:	4f 92       	push	r4
 6ba:	5f 92       	push	r5
 6bc:	6f 92       	push	r6
 6be:	7f 92       	push	r7
 6c0:	8f 92       	push	r8
 6c2:	9f 92       	push	r9
 6c4:	af 92       	push	r10
 6c6:	bf 92       	push	r11
 6c8:	cf 92       	push	r12
 6ca:	df 92       	push	r13
 6cc:	ef 92       	push	r14
 6ce:	ff 92       	push	r15
 6d0:	0f 93       	push	r16
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	4c 01       	movw	r8, r24
 6d8:	6b 01       	movw	r12, r22
 6da:	5a 01       	movw	r10, r20
 6dc:	29 01       	movw	r4, r18
 6de:	ca 01       	movw	r24, r20
 6e0:	3e dd       	rcall	.-1412   	; 0x15e <pvPortMalloc>
 6e2:	3c 01       	movw	r6, r24
 6e4:	89 2b       	or	r24, r25
 6e6:	09 f4       	brne	.+2      	; 0x6ea <xTaskCreate+0x32>
 6e8:	d3 c0       	rjmp	.+422    	; 0x890 <xTaskCreate+0x1d8>
 6ea:	86 e2       	ldi	r24, 0x26	; 38
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	37 dd       	rcall	.-1426   	; 0x15e <pvPortMalloc>
 6f0:	ec 01       	movw	r28, r24
 6f2:	89 2b       	or	r24, r25
 6f4:	59 f0       	breq	.+22     	; 0x70c <xTaskCreate+0x54>
 6f6:	78 8e       	std	Y+24, r7	; 0x18
 6f8:	6f 8a       	std	Y+23, r6	; 0x17
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	a8 1a       	sub	r10, r24
 6fe:	b1 08       	sbc	r11, r1
 700:	a6 0c       	add	r10, r6
 702:	b7 1c       	adc	r11, r7
 704:	c1 14       	cp	r12, r1
 706:	d1 04       	cpc	r13, r1
 708:	21 f4       	brne	.+8      	; 0x712 <xTaskCreate+0x5a>
 70a:	1f c0       	rjmp	.+62     	; 0x74a <xTaskCreate+0x92>
 70c:	c3 01       	movw	r24, r6
 70e:	5a dd       	rcall	.-1356   	; 0x1c4 <vPortFree>
 710:	bf c0       	rjmp	.+382    	; 0x890 <xTaskCreate+0x1d8>
 712:	d6 01       	movw	r26, r12
 714:	8c 91       	ld	r24, X
 716:	89 8f       	std	Y+25, r24	; 0x19
 718:	8c 91       	ld	r24, X
 71a:	88 23       	and	r24, r24
 71c:	a1 f0       	breq	.+40     	; 0x746 <xTaskCreate+0x8e>
 71e:	ae 01       	movw	r20, r28
 720:	46 5e       	subi	r20, 0xE6	; 230
 722:	5f 4f       	sbci	r21, 0xFF	; 255
 724:	f6 01       	movw	r30, r12
 726:	31 96       	adiw	r30, 0x01	; 1
 728:	b8 e0       	ldi	r27, 0x08	; 8
 72a:	cb 0e       	add	r12, r27
 72c:	d1 1c       	adc	r13, r1
 72e:	cf 01       	movw	r24, r30
 730:	21 91       	ld	r18, Z+
 732:	da 01       	movw	r26, r20
 734:	2d 93       	st	X+, r18
 736:	ad 01       	movw	r20, r26
 738:	dc 01       	movw	r26, r24
 73a:	8c 91       	ld	r24, X
 73c:	88 23       	and	r24, r24
 73e:	19 f0       	breq	.+6      	; 0x746 <xTaskCreate+0x8e>
 740:	ec 15       	cp	r30, r12
 742:	fd 05       	cpc	r31, r13
 744:	a1 f7       	brne	.-24     	; 0x72e <xTaskCreate+0x76>
 746:	18 a2       	std	Y+32, r1	; 0x20
 748:	01 c0       	rjmp	.+2      	; 0x74c <xTaskCreate+0x94>
 74a:	19 8e       	std	Y+25, r1	; 0x19
 74c:	04 30       	cpi	r16, 0x04	; 4
 74e:	08 f0       	brcs	.+2      	; 0x752 <xTaskCreate+0x9a>
 750:	03 e0       	ldi	r16, 0x03	; 3
 752:	0e 8b       	std	Y+22, r16	; 0x16
 754:	6e 01       	movw	r12, r28
 756:	b2 e0       	ldi	r27, 0x02	; 2
 758:	cb 0e       	add	r12, r27
 75a:	d1 1c       	adc	r13, r1
 75c:	c6 01       	movw	r24, r12
 75e:	41 dd       	rcall	.-1406   	; 0x1e2 <vListInitialiseItem>
 760:	ce 01       	movw	r24, r28
 762:	0c 96       	adiw	r24, 0x0c	; 12
 764:	3e dd       	rcall	.-1412   	; 0x1e2 <vListInitialiseItem>
 766:	d9 87       	std	Y+9, r29	; 0x09
 768:	c8 87       	std	Y+8, r28	; 0x08
 76a:	84 e0       	ldi	r24, 0x04	; 4
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	80 1b       	sub	r24, r16
 770:	91 09       	sbc	r25, r1
 772:	9d 87       	std	Y+13, r25	; 0x0d
 774:	8c 87       	std	Y+12, r24	; 0x0c
 776:	db 8b       	std	Y+19, r29	; 0x13
 778:	ca 8b       	std	Y+18, r28	; 0x12
 77a:	19 a2       	std	Y+33, r1	; 0x21
 77c:	1a a2       	std	Y+34, r1	; 0x22
 77e:	1b a2       	std	Y+35, r1	; 0x23
 780:	1c a2       	std	Y+36, r1	; 0x24
 782:	1d a2       	std	Y+37, r1	; 0x25
 784:	a2 01       	movw	r20, r4
 786:	b4 01       	movw	r22, r8
 788:	c5 01       	movw	r24, r10
 78a:	a8 dd       	rcall	.-1200   	; 0x2dc <pxPortInitialiseStack>
 78c:	99 83       	std	Y+1, r25	; 0x01
 78e:	88 83       	st	Y, r24
 790:	e1 14       	cp	r14, r1
 792:	f1 04       	cpc	r15, r1
 794:	19 f0       	breq	.+6      	; 0x79c <xTaskCreate+0xe4>
 796:	f7 01       	movw	r30, r14
 798:	d1 83       	std	Z+1, r29	; 0x01
 79a:	c0 83       	st	Z, r28
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	f8 94       	cli
 7a0:	0f 92       	push	r0
 7a2:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7a6:	8f 5f       	subi	r24, 0xFF	; 255
 7a8:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 7ac:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 7b0:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 7b4:	89 2b       	or	r24, r25
 7b6:	69 f5       	brne	.+90     	; 0x812 <xTaskCreate+0x15a>
 7b8:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 7bc:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7c0:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	a9 f5       	brne	.+106    	; 0x832 <xTaskCreate+0x17a>
 7c8:	87 e2       	ldi	r24, 0x27	; 39
 7ca:	97 e0       	ldi	r25, 0x07	; 7
 7cc:	fc dc       	rcall	.-1544   	; 0x1c6 <vListInitialise>
 7ce:	80 e3       	ldi	r24, 0x30	; 48
 7d0:	97 e0       	ldi	r25, 0x07	; 7
 7d2:	f9 dc       	rcall	.-1550   	; 0x1c6 <vListInitialise>
 7d4:	89 e3       	ldi	r24, 0x39	; 57
 7d6:	97 e0       	ldi	r25, 0x07	; 7
 7d8:	f6 dc       	rcall	.-1556   	; 0x1c6 <vListInitialise>
 7da:	82 e4       	ldi	r24, 0x42	; 66
 7dc:	97 e0       	ldi	r25, 0x07	; 7
 7de:	f3 dc       	rcall	.-1562   	; 0x1c6 <vListInitialise>
 7e0:	8e e1       	ldi	r24, 0x1E	; 30
 7e2:	97 e0       	ldi	r25, 0x07	; 7
 7e4:	f0 dc       	rcall	.-1568   	; 0x1c6 <vListInitialise>
 7e6:	85 e1       	ldi	r24, 0x15	; 21
 7e8:	97 e0       	ldi	r25, 0x07	; 7
 7ea:	ed dc       	rcall	.-1574   	; 0x1c6 <vListInitialise>
 7ec:	88 e0       	ldi	r24, 0x08	; 8
 7ee:	97 e0       	ldi	r25, 0x07	; 7
 7f0:	ea dc       	rcall	.-1580   	; 0x1c6 <vListInitialise>
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	96 e0       	ldi	r25, 0x06	; 6
 7f6:	e7 dc       	rcall	.-1586   	; 0x1c6 <vListInitialise>
 7f8:	8e e1       	ldi	r24, 0x1E	; 30
 7fa:	97 e0       	ldi	r25, 0x07	; 7
 7fc:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 800:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 804:	85 e1       	ldi	r24, 0x15	; 21
 806:	97 e0       	ldi	r25, 0x07	; 7
 808:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 80c:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 810:	10 c0       	rjmp	.+32     	; 0x832 <xTaskCreate+0x17a>
 812:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 816:	81 11       	cpse	r24, r1
 818:	0c c0       	rjmp	.+24     	; 0x832 <xTaskCreate+0x17a>
 81a:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 81e:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 822:	96 89       	ldd	r25, Z+22	; 0x16
 824:	8e 89       	ldd	r24, Y+22	; 0x16
 826:	89 17       	cp	r24, r25
 828:	20 f0       	brcs	.+8      	; 0x832 <xTaskCreate+0x17a>
 82a:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 82e:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 832:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 836:	8f 5f       	subi	r24, 0xFF	; 255
 838:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 83c:	8e 89       	ldd	r24, Y+22	; 0x16
 83e:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 842:	98 17       	cp	r25, r24
 844:	10 f4       	brcc	.+4      	; 0x84a <xTaskCreate+0x192>
 846:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	9c 01       	movw	r18, r24
 84e:	22 0f       	add	r18, r18
 850:	33 1f       	adc	r19, r19
 852:	22 0f       	add	r18, r18
 854:	33 1f       	adc	r19, r19
 856:	22 0f       	add	r18, r18
 858:	33 1f       	adc	r19, r19
 85a:	82 0f       	add	r24, r18
 85c:	93 1f       	adc	r25, r19
 85e:	b6 01       	movw	r22, r12
 860:	89 5d       	subi	r24, 0xD9	; 217
 862:	98 4f       	sbci	r25, 0xF8	; 248
 864:	c2 dc       	rcall	.-1660   	; 0x1ea <vListInsertEnd>
 866:	0f 90       	pop	r0
 868:	0f be       	out	0x3f, r0	; 63
 86a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 86e:	88 23       	and	r24, r24
 870:	59 f0       	breq	.+22     	; 0x888 <xTaskCreate+0x1d0>
 872:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 876:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 87a:	96 89       	ldd	r25, Z+22	; 0x16
 87c:	8e 89       	ldd	r24, Y+22	; 0x16
 87e:	98 17       	cp	r25, r24
 880:	28 f4       	brcc	.+10     	; 0x88c <xTaskCreate+0x1d4>
 882:	d2 dd       	rcall	.-1116   	; 0x428 <vPortYield>
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	05 c0       	rjmp	.+10     	; 0x892 <xTaskCreate+0x1da>
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	03 c0       	rjmp	.+6      	; 0x892 <xTaskCreate+0x1da>
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	01 c0       	rjmp	.+2      	; 0x892 <xTaskCreate+0x1da>
 890:	8f ef       	ldi	r24, 0xFF	; 255
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	0f 91       	pop	r16
 898:	ff 90       	pop	r15
 89a:	ef 90       	pop	r14
 89c:	df 90       	pop	r13
 89e:	cf 90       	pop	r12
 8a0:	bf 90       	pop	r11
 8a2:	af 90       	pop	r10
 8a4:	9f 90       	pop	r9
 8a6:	8f 90       	pop	r8
 8a8:	7f 90       	pop	r7
 8aa:	6f 90       	pop	r6
 8ac:	5f 90       	pop	r5
 8ae:	4f 90       	pop	r4
 8b0:	08 95       	ret

000008b2 <vTaskStartScheduler>:
 8b2:	ef 92       	push	r14
 8b4:	ff 92       	push	r15
 8b6:	0f 93       	push	r16
 8b8:	0f 2e       	mov	r0, r31
 8ba:	f1 ef       	ldi	r31, 0xF1	; 241
 8bc:	ef 2e       	mov	r14, r31
 8be:	f6 e0       	ldi	r31, 0x06	; 6
 8c0:	ff 2e       	mov	r15, r31
 8c2:	f0 2d       	mov	r31, r0
 8c4:	00 e0       	ldi	r16, 0x00	; 0
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	45 e5       	ldi	r20, 0x55	; 85
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	6b e0       	ldi	r22, 0x0B	; 11
 8d0:	71 e0       	ldi	r23, 0x01	; 1
 8d2:	87 ee       	ldi	r24, 0xE7	; 231
 8d4:	92 e0       	ldi	r25, 0x02	; 2
 8d6:	f0 de       	rcall	.-544    	; 0x6b8 <xTaskCreate>
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	79 f4       	brne	.+30     	; 0x8fa <vTaskStartScheduler+0x48>
 8dc:	f8 94       	cli
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	9f ef       	ldi	r25, 0xFF	; 255
 8e2:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 8e6:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 8f0:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 8f4:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 8f8:	5d dd       	rcall	.-1350   	; 0x3b4 <xPortStartScheduler>
 8fa:	0f 91       	pop	r16
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	08 95       	ret

00000902 <vTaskSuspendAll>:
 902:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 906:	8f 5f       	subi	r24, 0xFF	; 255
 908:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 90c:	08 95       	ret

0000090e <xTaskIncrementTick>:
 90e:	cf 92       	push	r12
 910:	df 92       	push	r13
 912:	ef 92       	push	r14
 914:	ff 92       	push	r15
 916:	0f 93       	push	r16
 918:	1f 93       	push	r17
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 922:	81 11       	cpse	r24, r1
 924:	95 c0       	rjmp	.+298    	; 0xa50 <xTaskIncrementTick+0x142>
 926:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 92a:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 92e:	8f ef       	ldi	r24, 0xFF	; 255
 930:	e8 1a       	sub	r14, r24
 932:	f8 0a       	sbc	r15, r24
 934:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 938:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 93c:	e1 14       	cp	r14, r1
 93e:	f1 04       	cpc	r15, r1
 940:	b1 f4       	brne	.+44     	; 0x96e <xTaskIncrementTick+0x60>
 942:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 946:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 94a:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 94e:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 952:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 956:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 95a:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 95e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 962:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 966:	8f 5f       	subi	r24, 0xFF	; 255
 968:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 96c:	11 de       	rcall	.-990    	; 0x590 <prvResetNextTaskUnblockTime>
 96e:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 972:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 976:	e8 16       	cp	r14, r24
 978:	f9 06       	cpc	r15, r25
 97a:	10 f4       	brcc	.+4      	; 0x980 <xTaskIncrementTick+0x72>
 97c:	d1 2c       	mov	r13, r1
 97e:	50 c0       	rjmp	.+160    	; 0xa20 <xTaskIncrementTick+0x112>
 980:	d1 2c       	mov	r13, r1
 982:	cc 24       	eor	r12, r12
 984:	c3 94       	inc	r12
 986:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 98a:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 98e:	80 81       	ld	r24, Z
 990:	81 11       	cpse	r24, r1
 992:	07 c0       	rjmp	.+14     	; 0x9a2 <xTaskIncrementTick+0x94>
 994:	8f ef       	ldi	r24, 0xFF	; 255
 996:	9f ef       	ldi	r25, 0xFF	; 255
 998:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 99c:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9a0:	3f c0       	rjmp	.+126    	; 0xa20 <xTaskIncrementTick+0x112>
 9a2:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9a6:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9aa:	05 80       	ldd	r0, Z+5	; 0x05
 9ac:	f6 81       	ldd	r31, Z+6	; 0x06
 9ae:	e0 2d       	mov	r30, r0
 9b0:	c6 81       	ldd	r28, Z+6	; 0x06
 9b2:	d7 81       	ldd	r29, Z+7	; 0x07
 9b4:	8a 81       	ldd	r24, Y+2	; 0x02
 9b6:	9b 81       	ldd	r25, Y+3	; 0x03
 9b8:	e8 16       	cp	r14, r24
 9ba:	f9 06       	cpc	r15, r25
 9bc:	28 f4       	brcc	.+10     	; 0x9c8 <xTaskIncrementTick+0xba>
 9be:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9c2:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9c6:	2c c0       	rjmp	.+88     	; 0xa20 <xTaskIncrementTick+0x112>
 9c8:	8e 01       	movw	r16, r28
 9ca:	0e 5f       	subi	r16, 0xFE	; 254
 9cc:	1f 4f       	sbci	r17, 0xFF	; 255
 9ce:	c8 01       	movw	r24, r16
 9d0:	5e dc       	rcall	.-1860   	; 0x28e <uxListRemove>
 9d2:	8c 89       	ldd	r24, Y+20	; 0x14
 9d4:	9d 89       	ldd	r25, Y+21	; 0x15
 9d6:	89 2b       	or	r24, r25
 9d8:	19 f0       	breq	.+6      	; 0x9e0 <xTaskIncrementTick+0xd2>
 9da:	ce 01       	movw	r24, r28
 9dc:	0c 96       	adiw	r24, 0x0c	; 12
 9de:	57 dc       	rcall	.-1874   	; 0x28e <uxListRemove>
 9e0:	8e 89       	ldd	r24, Y+22	; 0x16
 9e2:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 9e6:	98 17       	cp	r25, r24
 9e8:	10 f4       	brcc	.+4      	; 0x9ee <xTaskIncrementTick+0xe0>
 9ea:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	9c 01       	movw	r18, r24
 9f2:	22 0f       	add	r18, r18
 9f4:	33 1f       	adc	r19, r19
 9f6:	22 0f       	add	r18, r18
 9f8:	33 1f       	adc	r19, r19
 9fa:	22 0f       	add	r18, r18
 9fc:	33 1f       	adc	r19, r19
 9fe:	82 0f       	add	r24, r18
 a00:	93 1f       	adc	r25, r19
 a02:	b8 01       	movw	r22, r16
 a04:	89 5d       	subi	r24, 0xD9	; 217
 a06:	98 4f       	sbci	r25, 0xF8	; 248
 a08:	f0 db       	rcall	.-2080   	; 0x1ea <vListInsertEnd>
 a0a:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a0e:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a12:	9e 89       	ldd	r25, Y+22	; 0x16
 a14:	86 89       	ldd	r24, Z+22	; 0x16
 a16:	98 17       	cp	r25, r24
 a18:	08 f4       	brcc	.+2      	; 0xa1c <xTaskIncrementTick+0x10e>
 a1a:	b5 cf       	rjmp	.-150    	; 0x986 <xTaskIncrementTick+0x78>
 a1c:	dc 2c       	mov	r13, r12
 a1e:	b3 cf       	rjmp	.-154    	; 0x986 <xTaskIncrementTick+0x78>
 a20:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a24:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a28:	86 89       	ldd	r24, Z+22	; 0x16
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	fc 01       	movw	r30, r24
 a2e:	ee 0f       	add	r30, r30
 a30:	ff 1f       	adc	r31, r31
 a32:	ee 0f       	add	r30, r30
 a34:	ff 1f       	adc	r31, r31
 a36:	ee 0f       	add	r30, r30
 a38:	ff 1f       	adc	r31, r31
 a3a:	8e 0f       	add	r24, r30
 a3c:	9f 1f       	adc	r25, r31
 a3e:	fc 01       	movw	r30, r24
 a40:	e9 5d       	subi	r30, 0xD9	; 217
 a42:	f8 4f       	sbci	r31, 0xF8	; 248
 a44:	80 81       	ld	r24, Z
 a46:	82 30       	cpi	r24, 0x02	; 2
 a48:	48 f0       	brcs	.+18     	; 0xa5c <xTaskIncrementTick+0x14e>
 a4a:	dd 24       	eor	r13, r13
 a4c:	d3 94       	inc	r13
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <xTaskIncrementTick+0x14e>
 a50:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 a5a:	d1 2c       	mov	r13, r1
 a5c:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 a60:	88 23       	and	r24, r24
 a62:	11 f0       	breq	.+4      	; 0xa68 <xTaskIncrementTick+0x15a>
 a64:	dd 24       	eor	r13, r13
 a66:	d3 94       	inc	r13
 a68:	8d 2d       	mov	r24, r13
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	1f 91       	pop	r17
 a70:	0f 91       	pop	r16
 a72:	ff 90       	pop	r15
 a74:	ef 90       	pop	r14
 a76:	df 90       	pop	r13
 a78:	cf 90       	pop	r12
 a7a:	08 95       	ret

00000a7c <xTaskResumeAll>:
 a7c:	df 92       	push	r13
 a7e:	ef 92       	push	r14
 a80:	ff 92       	push	r15
 a82:	0f 93       	push	r16
 a84:	1f 93       	push	r17
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	0f 92       	push	r0
 a90:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a94:	81 50       	subi	r24, 0x01	; 1
 a96:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 a9a:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a9e:	81 11       	cpse	r24, r1
 aa0:	59 c0       	rjmp	.+178    	; 0xb54 <xTaskResumeAll+0xd8>
 aa2:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 aa6:	81 11       	cpse	r24, r1
 aa8:	30 c0       	rjmp	.+96     	; 0xb0a <xTaskResumeAll+0x8e>
 aaa:	57 c0       	rjmp	.+174    	; 0xb5a <xTaskResumeAll+0xde>
 aac:	d7 01       	movw	r26, r14
 aae:	15 96       	adiw	r26, 0x05	; 5
 ab0:	ed 91       	ld	r30, X+
 ab2:	fc 91       	ld	r31, X
 ab4:	16 97       	sbiw	r26, 0x06	; 6
 ab6:	c6 81       	ldd	r28, Z+6	; 0x06
 ab8:	d7 81       	ldd	r29, Z+7	; 0x07
 aba:	ce 01       	movw	r24, r28
 abc:	0c 96       	adiw	r24, 0x0c	; 12
 abe:	e7 db       	rcall	.-2098   	; 0x28e <uxListRemove>
 ac0:	8e 01       	movw	r16, r28
 ac2:	0e 5f       	subi	r16, 0xFE	; 254
 ac4:	1f 4f       	sbci	r17, 0xFF	; 255
 ac6:	c8 01       	movw	r24, r16
 ac8:	e2 db       	rcall	.-2108   	; 0x28e <uxListRemove>
 aca:	8e 89       	ldd	r24, Y+22	; 0x16
 acc:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ad0:	98 17       	cp	r25, r24
 ad2:	10 f4       	brcc	.+4      	; 0xad8 <xTaskResumeAll+0x5c>
 ad4:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	9c 01       	movw	r18, r24
 adc:	22 0f       	add	r18, r18
 ade:	33 1f       	adc	r19, r19
 ae0:	22 0f       	add	r18, r18
 ae2:	33 1f       	adc	r19, r19
 ae4:	22 0f       	add	r18, r18
 ae6:	33 1f       	adc	r19, r19
 ae8:	82 0f       	add	r24, r18
 aea:	93 1f       	adc	r25, r19
 aec:	b8 01       	movw	r22, r16
 aee:	89 5d       	subi	r24, 0xD9	; 217
 af0:	98 4f       	sbci	r25, 0xF8	; 248
 af2:	7b db       	rcall	.-2314   	; 0x1ea <vListInsertEnd>
 af4:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 af8:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 afc:	9e 89       	ldd	r25, Y+22	; 0x16
 afe:	86 89       	ldd	r24, Z+22	; 0x16
 b00:	98 17       	cp	r25, r24
 b02:	68 f0       	brcs	.+26     	; 0xb1e <xTaskResumeAll+0xa2>
 b04:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 b08:	0a c0       	rjmp	.+20     	; 0xb1e <xTaskResumeAll+0xa2>
 b0a:	c0 e0       	ldi	r28, 0x00	; 0
 b0c:	d0 e0       	ldi	r29, 0x00	; 0
 b0e:	0f 2e       	mov	r0, r31
 b10:	f8 e0       	ldi	r31, 0x08	; 8
 b12:	ef 2e       	mov	r14, r31
 b14:	f7 e0       	ldi	r31, 0x07	; 7
 b16:	ff 2e       	mov	r15, r31
 b18:	f0 2d       	mov	r31, r0
 b1a:	dd 24       	eor	r13, r13
 b1c:	d3 94       	inc	r13
 b1e:	f7 01       	movw	r30, r14
 b20:	80 81       	ld	r24, Z
 b22:	81 11       	cpse	r24, r1
 b24:	c3 cf       	rjmp	.-122    	; 0xaac <xTaskResumeAll+0x30>
 b26:	cd 2b       	or	r28, r29
 b28:	09 f0       	breq	.+2      	; 0xb2c <xTaskResumeAll+0xb0>
 b2a:	32 dd       	rcall	.-1436   	; 0x590 <prvResetNextTaskUnblockTime>
 b2c:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b30:	cc 23       	and	r28, r28
 b32:	49 f0       	breq	.+18     	; 0xb46 <xTaskResumeAll+0xca>
 b34:	d1 e0       	ldi	r29, 0x01	; 1
 b36:	eb de       	rcall	.-554    	; 0x90e <xTaskIncrementTick>
 b38:	81 11       	cpse	r24, r1
 b3a:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 b3e:	c1 50       	subi	r28, 0x01	; 1
 b40:	d1 f7       	brne	.-12     	; 0xb36 <xTaskResumeAll+0xba>
 b42:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 b46:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b4a:	88 23       	and	r24, r24
 b4c:	29 f0       	breq	.+10     	; 0xb58 <xTaskResumeAll+0xdc>
 b4e:	6c dc       	rcall	.-1832   	; 0x428 <vPortYield>
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <xTaskResumeAll+0xde>
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	01 c0       	rjmp	.+2      	; 0xb5a <xTaskResumeAll+0xde>
 b58:	80 e0       	ldi	r24, 0x00	; 0
 b5a:	0f 90       	pop	r0
 b5c:	0f be       	out	0x3f, r0	; 63
 b5e:	df 91       	pop	r29
 b60:	cf 91       	pop	r28
 b62:	1f 91       	pop	r17
 b64:	0f 91       	pop	r16
 b66:	ff 90       	pop	r15
 b68:	ef 90       	pop	r14
 b6a:	df 90       	pop	r13
 b6c:	08 95       	ret

00000b6e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
 b72:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b74:	89 2b       	or	r24, r25
 b76:	39 f0       	breq	.+14     	; 0xb86 <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 b78:	c4 de       	rcall	.-632    	; 0x902 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 b7a:	60 e0       	ldi	r22, 0x00	; 0
 b7c:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 b7e:	5b dd       	rcall	.-1354   	; 0x636 <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b80:	7d df       	rcall	.-262    	; 0xa7c <xTaskResumeAll>
 b82:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 b84:	01 c0       	rjmp	.+2      	; 0xb88 <vTaskDelay+0x1a>
 b86:	50 dc       	rcall	.-1888   	; 0x428 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 b88:	df 91       	pop	r29
 b8a:	cf 91       	pop	r28
 b8c:	08 95       	ret

00000b8e <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 b8e:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 b92:	88 23       	and	r24, r24
 b94:	21 f0       	breq	.+8      	; 0xb9e <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 b96:	81 e0       	ldi	r24, 0x01	; 1
 b98:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 b9c:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 b9e:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 ba2:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ba6:	82 2f       	mov	r24, r18
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	fc 01       	movw	r30, r24
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	ee 0f       	add	r30, r30
 bb6:	ff 1f       	adc	r31, r31
 bb8:	e8 0f       	add	r30, r24
 bba:	f9 1f       	adc	r31, r25
 bbc:	e9 5d       	subi	r30, 0xD9	; 217
 bbe:	f8 4f       	sbci	r31, 0xF8	; 248
 bc0:	30 81       	ld	r19, Z
 bc2:	31 11       	cpse	r19, r1
 bc4:	11 c0       	rjmp	.+34     	; 0xbe8 <vTaskSwitchContext+0x5a>
 bc6:	21 50       	subi	r18, 0x01	; 1
 bc8:	82 2f       	mov	r24, r18
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	fc 01       	movw	r30, r24
 bce:	ee 0f       	add	r30, r30
 bd0:	ff 1f       	adc	r31, r31
 bd2:	ee 0f       	add	r30, r30
 bd4:	ff 1f       	adc	r31, r31
 bd6:	ee 0f       	add	r30, r30
 bd8:	ff 1f       	adc	r31, r31
 bda:	e8 0f       	add	r30, r24
 bdc:	f9 1f       	adc	r31, r25
 bde:	e9 5d       	subi	r30, 0xD9	; 217
 be0:	f8 4f       	sbci	r31, 0xF8	; 248
 be2:	30 81       	ld	r19, Z
 be4:	33 23       	and	r19, r19
 be6:	79 f3       	breq	.-34     	; 0xbc6 <vTaskSwitchContext+0x38>
 be8:	ac 01       	movw	r20, r24
 bea:	44 0f       	add	r20, r20
 bec:	55 1f       	adc	r21, r21
 bee:	44 0f       	add	r20, r20
 bf0:	55 1f       	adc	r21, r21
 bf2:	44 0f       	add	r20, r20
 bf4:	55 1f       	adc	r21, r21
 bf6:	48 0f       	add	r20, r24
 bf8:	59 1f       	adc	r21, r25
 bfa:	da 01       	movw	r26, r20
 bfc:	a9 5d       	subi	r26, 0xD9	; 217
 bfe:	b8 4f       	sbci	r27, 0xF8	; 248
 c00:	11 96       	adiw	r26, 0x01	; 1
 c02:	ed 91       	ld	r30, X+
 c04:	fc 91       	ld	r31, X
 c06:	12 97       	sbiw	r26, 0x02	; 2
 c08:	02 80       	ldd	r0, Z+2	; 0x02
 c0a:	f3 81       	ldd	r31, Z+3	; 0x03
 c0c:	e0 2d       	mov	r30, r0
 c0e:	12 96       	adiw	r26, 0x02	; 2
 c10:	fc 93       	st	X, r31
 c12:	ee 93       	st	-X, r30
 c14:	11 97       	sbiw	r26, 0x01	; 1
 c16:	46 5d       	subi	r20, 0xD6	; 214
 c18:	58 4f       	sbci	r21, 0xF8	; 248
 c1a:	e4 17       	cp	r30, r20
 c1c:	f5 07       	cpc	r31, r21
 c1e:	29 f4       	brne	.+10     	; 0xc2a <vTaskSwitchContext+0x9c>
 c20:	42 81       	ldd	r20, Z+2	; 0x02
 c22:	53 81       	ldd	r21, Z+3	; 0x03
 c24:	fd 01       	movw	r30, r26
 c26:	52 83       	std	Z+2, r21	; 0x02
 c28:	41 83       	std	Z+1, r20	; 0x01
 c2a:	fc 01       	movw	r30, r24
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	ee 0f       	add	r30, r30
 c32:	ff 1f       	adc	r31, r31
 c34:	ee 0f       	add	r30, r30
 c36:	ff 1f       	adc	r31, r31
 c38:	8e 0f       	add	r24, r30
 c3a:	9f 1f       	adc	r25, r31
 c3c:	fc 01       	movw	r30, r24
 c3e:	e9 5d       	subi	r30, 0xD9	; 217
 c40:	f8 4f       	sbci	r31, 0xF8	; 248
 c42:	01 80       	ldd	r0, Z+1	; 0x01
 c44:	f2 81       	ldd	r31, Z+2	; 0x02
 c46:	e0 2d       	mov	r30, r0
 c48:	86 81       	ldd	r24, Z+6	; 0x06
 c4a:	97 81       	ldd	r25, Z+7	; 0x07
 c4c:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 c50:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 c54:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 c58:	08 95       	ret

00000c5a <_exit>:
 c5a:	f8 94       	cli

00000c5c <__stop_program>:
 c5c:	ff cf       	rjmp	.-2      	; 0xc5c <__stop_program>

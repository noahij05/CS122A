
achoi035_njime006_Lab2_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a38  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a2  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000448  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000170  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000020c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6c d0       	rcall	.+216    	; 0x182 <main>
  aa:	79 c0       	rjmp	.+242    	; 0x19e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <initUSART>:
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = sendMe;
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
		UDR1 = sendMe;
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	81 f0       	breq	.+32     	; 0xd2 <initUSART+0x24>
  b2:	e1 ec       	ldi	r30, 0xC1	; 193
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 61       	ori	r24, 0x18	; 24
  ba:	80 83       	st	Z, r24
  bc:	e2 ec       	ldi	r30, 0xC2	; 194
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	86 60       	ori	r24, 0x06	; 6
  c4:	80 83       	st	Z, r24
  c6:	83 e3       	ldi	r24, 0x33	; 51
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d0:	08 95       	ret
  d2:	e9 ec       	ldi	r30, 0xC9	; 201
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 61       	ori	r24, 0x18	; 24
  da:	80 83       	st	Z, r24
  dc:	ea ec       	ldi	r30, 0xCA	; 202
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 60       	ori	r24, 0x06	; 6
  e4:	80 83       	st	Z, r24
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  ec:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  f0:	08 95       	ret

000000f2 <USART_Flush>:
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	29 f4       	brne	.+10     	; 0x100 <USART_Flush+0xe>
  f6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  fa:	88 23       	and	r24, r24
  fc:	74 f0       	brlt	.+28     	; 0x11a <USART_Flush+0x28>
  fe:	08 95       	ret
 100:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 104:	88 23       	and	r24, r24
 106:	8c f4       	brge	.+34     	; 0x12a <USART_Flush+0x38>
 108:	a6 ec       	ldi	r26, 0xC6	; 198
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	8c 91       	ld	r24, X
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	e4 f3       	brlt	.-8      	; 0x110 <USART_Flush+0x1e>
 118:	08 95       	ret
 11a:	ae ec       	ldi	r26, 0xCE	; 206
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e8 ec       	ldi	r30, 0xC8	; 200
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	8c 91       	ld	r24, X
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	e4 f3       	brlt	.-8      	; 0x122 <USART_Flush+0x30>
 12a:	08 95       	ret

0000012c <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	41 f0       	breq	.+16     	; 0x140 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	ec f7       	brge	.-6      	; 0x134 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 13a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13e:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 140:	e8 ec       	ldi	r30, 0xC8	; 200
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 23       	and	r24, r24
 148:	ec f7       	brge	.-6      	; 0x144 <USART_Receive+0x18>
		return UDR1;
 14a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 14e:	08 95       	ret

00000150 <Receive>:

enum SM1_States {Sent, NSent} state;

void Receive()
{
	switch(state)
 150:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 154:	88 23       	and	r24, r24
 156:	69 f0       	breq	.+26     	; 0x172 <Receive+0x22>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	79 f4       	brne	.+30     	; 0x17a <Receive+0x2a>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 15c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	{
		case NSent:
			if(USART_HasReceived(0))
 160:	88 23       	and	r24, r24
 162:	74 f4       	brge	.+28     	; 0x180 <Receive+0x30>
				{state = Sent; break;}
 164:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
	}
	
	switch(state)
	{
		case Sent:
			temp = USART_Receive(0);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	e0 df       	rcall	.-64     	; 0x12c <USART_Receive>
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 170:	08 95       	ret
				{state = Sent; break;}
			else
				{state = NSent; break;}
				
		case Sent:
			{state = NSent; break;}
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 178:	08 95       	ret
			
		default:
			state = NSent;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 180:	08 95       	ret

00000182 <main>:
	//return state;
}

int main(void)
{
	DDRA = 0xFF; PINA = 0x00;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	81 b9       	out	0x01, r24	; 1
 186:	10 b8       	out	0x00, r1	; 0
	//DDRC = 0xFF; PORTC = 0x00;
	DDRD = 0x00; PIND = 0xFF;
 188:	1a b8       	out	0x0a, r1	; 10
 18a:	89 b9       	out	0x09, r24	; 9
	initUSART(0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	8f df       	rcall	.-226    	; 0xae <initUSART>
	USART_Flush(0);
 190:	80 e0       	ldi	r24, 0x00	; 0
    
    while (1) 
    {
		Receive();
 192:	af df       	rcall	.-162    	; 0xf2 <USART_Flush>
 194:	dd df       	rcall	.-70     	; 0x150 <Receive>
		PORTA = temp;
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19a:	82 b9       	out	0x02, r24	; 2
 19c:	fb cf       	rjmp	.-10     	; 0x194 <main+0x12>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>

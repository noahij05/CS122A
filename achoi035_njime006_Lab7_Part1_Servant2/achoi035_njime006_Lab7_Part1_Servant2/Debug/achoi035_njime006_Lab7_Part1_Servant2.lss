
achoi035_njime006_Lab7_Part1_Servant2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800100  00800100  0000030c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd1  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090e  00000000  00000000  00000fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cb  00000000  00000000  000018c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054c  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000278  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	93 c0       	rjmp	.+294    	; 0x174 <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	af 31       	cpi	r26, 0x1F	; 31
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	74 d0       	rcall	.+232    	; 0x192 <main>
  aa:	f4 c0       	rjmp	.+488    	; 0x294 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	5c f0       	brlt	.+22     	; 0xca <delay_ms+0x1c>
  b4:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
  b6:	00 00       	nop
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
  bc:	e1 f7       	brne	.-8      	; 0xb6 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	84 17       	cp	r24, r20
  c4:	95 07       	cpc	r25, r21
  c6:	19 f4       	brne	.+6      	; 0xce <delay_ms+0x20>
  c8:	08 95       	ret
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
#define RS 0				// pin number of uC connected to pin 4 of LCD disp.
#define E 1				// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
  ce:	27 e0       	ldi	r18, 0x07	; 7
  d0:	33 e0       	ldi	r19, 0x03	; 3
  d2:	f1 cf       	rjmp	.-30     	; 0xb6 <delay_ms+0x8>

000000d4 <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
  d4:	28 98       	cbi	0x05, 0	; 5
	DATA_BUS = Command;
  d6:	8b b9       	out	0x0b, r24	; 11
	SET_BIT(CONTROL_BUS,E);
  d8:	29 9a       	sbi	0x05, 1	; 5
	asm("nop");
  da:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
  dc:	29 98       	cbi	0x05, 1	; 5
	delay_ms(2); // ClearScreen requires 1.52ms to execute
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	e5 cf       	rjmp	.-54     	; 0xae <delay_ms>
  e4:	08 95       	ret

000000e6 <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	f5 cf       	rjmp	.-22     	; 0xd4 <LCD_WriteCommand>
  ea:	08 95       	ret

000000ec <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
  ec:	84 e6       	ldi	r24, 0x64	; 100
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	de df       	rcall	.-68     	; 0xae <delay_ms>
	LCD_WriteCommand(0x38);
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	ef df       	rcall	.-34     	; 0xd4 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	ed df       	rcall	.-38     	; 0xd4 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	eb df       	rcall	.-42     	; 0xd4 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	e9 df       	rcall	.-46     	; 0xd4 <LCD_WriteCommand>
	delay_ms(10);						 
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	d3 cf       	rjmp	.-90     	; 0xae <delay_ms>
 108:	08 95       	ret

0000010a <LCD_WriteData>:
 10a:	28 9a       	sbi	0x05, 0	; 5
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 10c:	8b b9       	out	0x0b, r24	; 11
	SET_BIT(CONTROL_BUS,E);
 10e:	29 9a       	sbi	0x05, 1	; 5
	asm("nop");
 110:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 112:	29 98       	cbi	0x05, 1	; 5
	delay_ms(1);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	ca cf       	rjmp	.-108    	; 0xae <delay_ms>
 11a:	08 95       	ret

0000011c <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 11c:	81 31       	cpi	r24, 0x11	; 17
 11e:	18 f4       	brcc	.+6      	; 0x126 <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 120:	81 58       	subi	r24, 0x81	; 129
 122:	d8 cf       	rjmp	.-80     	; 0xd4 <LCD_WriteCommand>
 124:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 126:	81 55       	subi	r24, 0x51	; 81
 128:	d5 cf       	rjmp	.-86     	; 0xd4 <LCD_WriteCommand>
 12a:	08 95       	ret

0000012c <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	18 2f       	mov	r17, r24
 136:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 138:	d6 df       	rcall	.-84     	; 0xe6 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 13a:	88 81       	ld	r24, Y
 13c:	88 23       	and	r24, r24
 13e:	51 f0       	breq	.+20     	; 0x154 <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 140:	01 e0       	ldi	r16, 0x01	; 1
 142:	01 0f       	add	r16, r17
 144:	81 2f       	mov	r24, r17
 146:	ea df       	rcall	.-44     	; 0x11c <LCD_Cursor>
		LCD_WriteData(*string++);
 148:	89 91       	ld	r24, Y+
 14a:	df df       	rcall	.-66     	; 0x10a <LCD_WriteData>
 14c:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 14e:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 150:	81 11       	cpse	r24, r1
 152:	f6 cf       	rjmp	.-20     	; 0x140 <LCD_DisplayString+0x14>
 154:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <SPI_ServantInit>:
 15e:	26 9a       	sbi	0x04, 6	; 4

unsigned char SPI_received_data = 0;

void SPI_ServantInit(void) {
	DDR_SPI |= (1 << DD_MISO);
	DDR_SPI &= ~(1 << DD_MOSI) & ~(1 << DD_SS) & ~(1 << DD_SCK);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	8f 74       	andi	r24, 0x4F	; 79
 164:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1 << SPE) | (1 << SPIE);
 166:	8c b5       	in	r24, 0x2c	; 44
 168:	80 6c       	ori	r24, 0xC0	; 192
 16a:	8c bd       	out	0x2c, r24	; 44
	SREG |= (0x80);
 16c:	8f b7       	in	r24, 0x3f	; 63
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	8f bf       	out	0x3f, r24	; 63
 172:	08 95       	ret

00000174 <__vector_19>:
}

ISR(SPI_STC_vect) {
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
	SPI_received_data = SPDR;
 180:	8e b5       	in	r24, 0x2e	; 46
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <main>:



int main(void)
{
	DDRB = 0x0F; PORTB = 0xF0;
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	84 b9       	out	0x04, r24	; 4
 196:	80 ef       	ldi	r24, 0xF0	; 240
 198:	85 b9       	out	0x05, r24	; 5
	DDRD = 0xFF; PORTD = 0x00;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	8a b9       	out	0x0a, r24	; 10
 19e:	1b b8       	out	0x0b, r1	; 11
	SPI_ServantInit();
 1a0:	de df       	rcall	.-68     	; 0x15e <SPI_ServantInit>
	LCD_init();
 1a2:	a4 df       	rcall	.-184    	; 0xec <LCD_init>
	LCD_Cursor(1);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	ba df       	rcall	.-140    	; 0x11c <LCD_Cursor>
 1a8:	c1 e0       	ldi	r28, 0x01	; 1
	unsigned char lightValue;  
    while (1) 
    {
		lightValue = SPI_received_data;
		speech[3] = '0' + (lightValue % 10); 
 1aa:	d1 e0       	ldi	r29, 0x01	; 1
 1ac:	0f 2e       	mov	r0, r31
 1ae:	fd ec       	ldi	r31, 0xCD	; 205
 1b0:	df 2e       	mov	r13, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	0f 2e       	mov	r0, r31
		speech[2] =  '0' + ((lightValue / 10)%10);
		speech[1] =  '0' + ((lightValue / 100)%10);
 1b6:	f9 e2       	ldi	r31, 0x29	; 41
 1b8:	cf 2e       	mov	r12, r31
 1ba:	f0 2d       	mov	r31, r0
 1bc:	0f 2e       	mov	r0, r31
		speech[0] =  '0' + ((lightValue / 1000)%10);
 1be:	f8 ee       	ldi	r31, 0xE8	; 232
 1c0:	ef 2e       	mov	r14, r31
 1c2:	f3 e0       	ldi	r31, 0x03	; 3
 1c4:	ff 2e       	mov	r15, r31
 1c6:	f0 2d       	mov	r31, r0
 1c8:	0a e0       	ldi	r16, 0x0A	; 10
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
	LCD_init();
	LCD_Cursor(1);
	unsigned char lightValue;  
    while (1) 
    {
		lightValue = SPI_received_data;
 1d0:	8d 9d       	mul	r24, r13
		speech[3] = '0' + (lightValue % 10); 
 1d2:	91 2d       	mov	r25, r1
 1d4:	11 24       	eor	r1, r1
 1d6:	96 95       	lsr	r25
 1d8:	96 95       	lsr	r25
 1da:	96 95       	lsr	r25
 1dc:	39 2f       	mov	r19, r25
 1de:	33 0f       	add	r19, r19
 1e0:	23 2f       	mov	r18, r19
 1e2:	22 0f       	add	r18, r18
 1e4:	22 0f       	add	r18, r18
 1e6:	23 0f       	add	r18, r19
 1e8:	38 2f       	mov	r19, r24
 1ea:	32 1b       	sub	r19, r18
 1ec:	23 2f       	mov	r18, r19
 1ee:	20 5d       	subi	r18, 0xD0	; 208
 1f0:	2b 83       	std	Y+3, r18	; 0x03
 1f2:	9d 9d       	mul	r25, r13
		speech[2] =  '0' + ((lightValue / 10)%10);
 1f4:	21 2d       	mov	r18, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	26 95       	lsr	r18
 1fa:	26 95       	lsr	r18
 1fc:	26 95       	lsr	r18
 1fe:	22 0f       	add	r18, r18
 200:	32 2f       	mov	r19, r18
 202:	33 0f       	add	r19, r19
 204:	33 0f       	add	r19, r19
 206:	23 0f       	add	r18, r19
 208:	92 1b       	sub	r25, r18
 20a:	90 5d       	subi	r25, 0xD0	; 208
 20c:	9a 83       	std	Y+2, r25	; 0x02
 20e:	8c 9d       	mul	r24, r12
		speech[1] =  '0' + ((lightValue / 100)%10);
 210:	91 2d       	mov	r25, r1
 212:	11 24       	eor	r1, r1
 214:	92 95       	swap	r25
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	90 5d       	subi	r25, 0xD0	; 208
 21a:	99 83       	std	Y+1, r25	; 0x01
		speech[0] =  '0' + ((lightValue / 1000)%10);
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	b7 01       	movw	r22, r14
 220:	12 d0       	rcall	.+36     	; 0x246 <__divmodhi4>
 222:	cb 01       	movw	r24, r22
 224:	b8 01       	movw	r22, r16
 226:	0f d0       	rcall	.+30     	; 0x246 <__divmodhi4>
 228:	80 5d       	subi	r24, 0xD0	; 208
 22a:	88 83       	st	Y, r24
		unsigned char* to_output = speech;
		LCD_DisplayString(1, to_output);
 22c:	be 01       	movw	r22, r28
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	7d df       	rcall	.-262    	; 0x12c <LCD_DisplayString>
 232:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	90 e7       	ldi	r25, 0x70	; 112
 236:	22 e0       	ldi	r18, 0x02	; 2
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	20 40       	sbci	r18, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0xa6>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0xb0>
 242:	00 00       	nop
 244:	c3 cf       	rjmp	.-122    	; 0x1cc <main+0x3a>

00000246 <__divmodhi4>:
 246:	97 fb       	bst	r25, 7
 248:	07 2e       	mov	r0, r23
 24a:	16 f4       	brtc	.+4      	; 0x250 <__divmodhi4+0xa>
 24c:	00 94       	com	r0
 24e:	06 d0       	rcall	.+12     	; 0x25c <__divmodhi4_neg1>
 250:	77 fd       	sbrc	r23, 7
 252:	08 d0       	rcall	.+16     	; 0x264 <__divmodhi4_neg2>
 254:	0b d0       	rcall	.+22     	; 0x26c <__udivmodhi4>
 256:	07 fc       	sbrc	r0, 7
 258:	05 d0       	rcall	.+10     	; 0x264 <__divmodhi4_neg2>
 25a:	3e f4       	brtc	.+14     	; 0x26a <__divmodhi4_exit>

0000025c <__divmodhi4_neg1>:
 25c:	90 95       	com	r25
 25e:	81 95       	neg	r24
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	08 95       	ret

00000264 <__divmodhi4_neg2>:
 264:	70 95       	com	r23
 266:	61 95       	neg	r22
 268:	7f 4f       	sbci	r23, 0xFF	; 255

0000026a <__divmodhi4_exit>:
 26a:	08 95       	ret

0000026c <__udivmodhi4>:
 26c:	aa 1b       	sub	r26, r26
 26e:	bb 1b       	sub	r27, r27
 270:	51 e1       	ldi	r21, 0x11	; 17
 272:	07 c0       	rjmp	.+14     	; 0x282 <__udivmodhi4_ep>

00000274 <__udivmodhi4_loop>:
 274:	aa 1f       	adc	r26, r26
 276:	bb 1f       	adc	r27, r27
 278:	a6 17       	cp	r26, r22
 27a:	b7 07       	cpc	r27, r23
 27c:	10 f0       	brcs	.+4      	; 0x282 <__udivmodhi4_ep>
 27e:	a6 1b       	sub	r26, r22
 280:	b7 0b       	sbc	r27, r23

00000282 <__udivmodhi4_ep>:
 282:	88 1f       	adc	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	5a 95       	dec	r21
 288:	a9 f7       	brne	.-22     	; 0x274 <__udivmodhi4_loop>
 28a:	80 95       	com	r24
 28c:	90 95       	com	r25
 28e:	bc 01       	movw	r22, r24
 290:	cd 01       	movw	r24, r26
 292:	08 95       	ret

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>

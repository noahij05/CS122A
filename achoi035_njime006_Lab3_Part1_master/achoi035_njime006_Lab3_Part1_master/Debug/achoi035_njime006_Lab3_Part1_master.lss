
achoi035_njime006_Lab3_Part1_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c47  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092a  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004eb  00000000  00000000  0000182d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000539  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000289  00000000  00000000  00002339  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000025c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	52 d0       	rcall	.+164    	; 0x13e <main>
  9a:	6f c0       	rjmp	.+222    	; 0x17a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <delay_ms>:
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	5c f0       	brlt	.+22     	; 0xba <delay_ms+0x1c>
  a4:	08 95       	ret
  a6:	00 00       	nop
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	31 09       	sbc	r19, r1
  ac:	e1 f7       	brne	.-8      	; 0xa6 <delay_ms+0x8>
  ae:	4f 5f       	subi	r20, 0xFF	; 255
  b0:	5f 4f       	sbci	r21, 0xFF	; 255
  b2:	84 17       	cp	r24, r20
  b4:	95 07       	cpc	r25, r21
  b6:	19 f4       	brne	.+6      	; 0xbe <delay_ms+0x20>
  b8:	08 95       	ret
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	27 e0       	ldi	r18, 0x07	; 7
  c0:	33 e0       	ldi	r19, 0x03	; 3
  c2:	f1 cf       	rjmp	.-30     	; 0xa6 <delay_ms+0x8>

000000c4 <LCD_WriteCommand>:
  c4:	46 98       	cbi	0x08, 6	; 8
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	47 9a       	sbi	0x08, 7	; 8
  ca:	00 00       	nop
  cc:	47 98       	cbi	0x08, 7	; 8
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	e5 cf       	rjmp	.-54     	; 0x9e <delay_ms>
  d4:	08 95       	ret

000000d6 <LCD_ClearScreen>:
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <LCD_WriteCommand>
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	84 e6       	ldi	r24, 0x64	; 100
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	de df       	rcall	.-68     	; 0x9e <delay_ms>
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	ef df       	rcall	.-34     	; 0xc4 <LCD_WriteCommand>
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	ed df       	rcall	.-38     	; 0xc4 <LCD_WriteCommand>
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	eb df       	rcall	.-42     	; 0xc4 <LCD_WriteCommand>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	e9 df       	rcall	.-46     	; 0xc4 <LCD_WriteCommand>
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	d3 cf       	rjmp	.-90     	; 0x9e <delay_ms>
  f8:	08 95       	ret

000000fa <LCD_WriteData>:
  fa:	46 9a       	sbi	0x08, 6	; 8
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	47 9a       	sbi	0x08, 7	; 8
 100:	00 00       	nop
 102:	47 98       	cbi	0x08, 7	; 8
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ca cf       	rjmp	.-108    	; 0x9e <delay_ms>
 10a:	08 95       	ret

0000010c <LCD_Cursor>:
 10c:	81 31       	cpi	r24, 0x11	; 17
 10e:	18 f4       	brcc	.+6      	; 0x116 <LCD_Cursor+0xa>
 110:	81 58       	subi	r24, 0x81	; 129
 112:	d8 cf       	rjmp	.-80     	; 0xc4 <LCD_WriteCommand>
 114:	08 95       	ret
 116:	81 55       	subi	r24, 0x51	; 81
 118:	d5 cf       	rjmp	.-86     	; 0xc4 <LCD_WriteCommand>
 11a:	08 95       	ret

0000011c <SPI_MasterInit>:
#include <util/delay.h>
#include "bit.h"
#include "lcd.h"

void SPI_MasterInit(void) {
	DDRB = 0xBF; PORTB = 0x40;
 11c:	8f eb       	ldi	r24, 0xBF	; 191
 11e:	84 b9       	out	0x04, r24	; 4
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	85 b9       	out	0x05, r24	; 5
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 124:	8c b5       	in	r24, 0x2c	; 44
 126:	81 65       	ori	r24, 0x51	; 81
 128:	8c bd       	out	0x2c, r24	; 44
	SREG =0x80;
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	8f bf       	out	0x3f, r24	; 63
 12e:	08 95       	ret

00000130 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(unsigned char cData) {
	PORTB = SetBit(PORTB,4,0);
 130:	2c 98       	cbi	0x05, 4	; 5
	SPDR = cData;
 132:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))) { // wait for transmission to complete
 134:	0d b4       	in	r0, 0x2d	; 45
 136:	07 fe       	sbrs	r0, 7
 138:	fd cf       	rjmp	.-6      	; 0x134 <SPI_MasterTransmit+0x4>
		;
	}

	PORTB = SetBit(PORTB,4,1);
 13a:	2c 9a       	sbi	0x05, 4	; 5
 13c:	08 95       	ret

0000013e <main>:
*/


int main(void)
{
	DDRA = 0x0F; PORTA = 0xF0;
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	81 b9       	out	0x01, r24	; 1
 142:	80 ef       	ldi	r24, 0xF0	; 240
 144:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	87 b9       	out	0x07, r24	; 7
 14a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	1b b8       	out	0x0b, r1	; 11
	SPI_MasterInit();
 150:	e5 df       	rcall	.-54     	; 0x11c <SPI_MasterInit>
	unsigned short int count = 1;
	unsigned char b = 'a';
    /* Replace with your application code */
	LCD_init();
 152:	c4 df       	rcall	.-120    	; 0xdc <LCD_init>
	LCD_ClearScreen();
 154:	c0 df       	rcall	.-128    	; 0xd6 <LCD_ClearScreen>
	LCD_Cursor(4);
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	d9 df       	rcall	.-78     	; 0x10c <LCD_Cursor>
	LCD_WriteData(b);
 15a:	81 e6       	ldi	r24, 0x61	; 97
 15c:	ce df       	rcall	.-100    	; 0xfa <LCD_WriteData>
 15e:	c1 e0       	ldi	r28, 0x01	; 1
    while (1) 
    {
		
		
		SPI_MasterTransmit(count);
 160:	8c 2f       	mov	r24, r28
 162:	e6 df       	rcall	.-52     	; 0x130 <SPI_MasterTransmit>
 164:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	89 e6       	ldi	r24, 0x69	; 105
 168:	98 e1       	ldi	r25, 0x18	; 24
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x2c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x36>
 174:	00 00       	nop
 176:	cf 5f       	subi	r28, 0xFF	; 255
 178:	f3 cf       	rjmp	.-26     	; 0x160 <main+0x22>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>

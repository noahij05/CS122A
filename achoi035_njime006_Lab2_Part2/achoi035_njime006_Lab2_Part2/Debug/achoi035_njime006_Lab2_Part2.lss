
achoi035_njime006_Lab2_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000802  00000896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800142  00800142  000008d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e11  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009de  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c8  00000000  00000000  000021d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000028a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054e  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003626  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b2 c1       	rjmp	.+868    	; 0x39a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 34       	cpi	r26, 0x42	; 66
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e4       	ldi	r26, 0x42	; 66
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 35       	cpi	r26, 0x53	; 83
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ee d1       	rcall	.+988    	; 0x4a0 <main>
  c4:	9c c3       	rjmp	.+1848   	; 0x7fe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LEDcontrolTick>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
  c8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <a_out>
  cc:	82 b9       	out	0x02, r24	; 2
  ce:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <c_out>
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret

000000da <SetOutputTick>:
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	91 05       	cpc	r25, r1
  de:	51 f0       	breq	.+20     	; 0xf4 <SetOutputTick+0x1a>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	91 05       	cpc	r25, r1
  e4:	71 f0       	breq	.+28     	; 0x102 <SetOutputTick+0x28>
  e6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <isLeader>
  ea:	81 11       	cpse	r24, r1
  ec:	14 c0       	rjmp	.+40     	; 0x116 <SetOutputTick+0x3c>
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret
  f4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <isLeader>
  f8:	81 11       	cpse	r24, r1
  fa:	07 c0       	rjmp	.+14     	; 0x10a <SetOutputTick+0x30>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 95       	ret
 102:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <isLeader>
 106:	22 23       	and	r18, r18
 108:	51 f0       	breq	.+20     	; 0x11e <SetOutputTick+0x44>
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <a_out>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
 116:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <a_out>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret

00000120 <UpdateStatusTick>:
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	49 f4       	brne	.+18     	; 0x136 <UpdateStatusTick+0x16>
 124:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <isLeader>
 128:	21 11       	cpse	r18, r1
 12a:	23 c0       	rjmp	.+70     	; 0x172 <UpdateStatusTick+0x52>
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	17 c0       	rjmp	.+46     	; 0x164 <UpdateStatusTick+0x44>
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <isLeader>
 13c:	81 11       	cpse	r24, r1
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	82 2f       	mov	r24, r18
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	22 23       	and	r18, r18
 146:	a9 f0       	breq	.+42     	; 0x172 <UpdateStatusTick+0x52>
 148:	21 30       	cpi	r18, 0x01	; 1
 14a:	e9 f4       	brne	.+58     	; 0x186 <UpdateStatusTick+0x66>
 14c:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <timeToLead>
 150:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <timeToLead+0x1>
 154:	28 3b       	cpi	r18, 0xB8	; 184
 156:	4b e0       	ldi	r20, 0x0B	; 11
 158:	34 07       	cpc	r19, r20
 15a:	20 f0       	brcs	.+8      	; 0x164 <UpdateStatusTick+0x44>
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <isLeader>
 162:	11 c0       	rjmp	.+34     	; 0x186 <UpdateStatusTick+0x66>
 164:	2b 5f       	subi	r18, 0xFB	; 251
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	30 93 44 01 	sts	0x0144, r19	; 0x800144 <timeToLead+0x1>
 16c:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <timeToLead>
 170:	0a c0       	rjmp	.+20     	; 0x186 <UpdateStatusTick+0x66>
 172:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 176:	22 23       	and	r18, r18
 178:	1c f4       	brge	.+6      	; 0x180 <UpdateStatusTick+0x60>
 17a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <isLeader>
 17e:	03 c0       	rjmp	.+6      	; 0x186 <UpdateStatusTick+0x66>
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <isLeader>
 186:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <isLeader>
 18a:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <c_out>
 18e:	08 95       	ret

00000190 <initUSART>:
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	81 f0       	breq	.+32     	; 0x1b4 <initUSART+0x24>
 194:	e1 ec       	ldi	r30, 0xC1	; 193
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	88 61       	ori	r24, 0x18	; 24
 19c:	80 83       	st	Z, r24
 19e:	e2 ec       	ldi	r30, 0xC2	; 194
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	86 60       	ori	r24, 0x06	; 6
 1a6:	80 83       	st	Z, r24
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1b2:	08 95       	ret
 1b4:	e9 ec       	ldi	r30, 0xC9	; 201
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	88 61       	ori	r24, 0x18	; 24
 1bc:	80 83       	st	Z, r24
 1be:	ea ec       	ldi	r30, 0xCA	; 202
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	86 60       	ori	r24, 0x06	; 6
 1c6:	80 83       	st	Z, r24
 1c8:	83 e3       	ldi	r24, 0x33	; 51
 1ca:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1ce:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1d2:	08 95       	ret

000001d4 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 1d4:	61 30       	cpi	r22, 0x01	; 1
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 1d8:	e0 ec       	ldi	r30, 0xC0	; 192
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	90 81       	ld	r25, Z
 1de:	95 ff       	sbrs	r25, 5
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <USART_Send+0x8>
		UDR0 = sendMe;
 1e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1e6:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 1e8:	e8 ec       	ldi	r30, 0xC8	; 200
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	90 81       	ld	r25, Z
 1ee:	95 ff       	sbrs	r25, 5
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <USART_Send+0x18>
		UDR1 = sendMe;
 1f2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1f6:	08 95       	ret

000001f8 <TransmitTick>:

unsigned short timeToLead = 0;

enum Transmitstate{transmitStop, transmitStart};

int TransmitTick(int state) {
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
	
	switch(state) {
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	51 f0       	breq	.+20     	; 0x214 <TransmitTick+0x1c>
		default:
		case transmitStop:
			if(isLeader) {
				state = transmitStart;
			} else {
				state = transmitStop;
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <isLeader>
 208:	21 11       	cpse	r18, r1
 20a:	01 c0       	rjmp	.+2      	; 0x20e <TransmitTick+0x16>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	c9 2f       	mov	r28, r25
 210:	d8 2f       	mov	r29, r24
 212:	09 c0       	rjmp	.+18     	; 0x226 <TransmitTick+0x2e>
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <isLeader>
 21c:	21 11       	cpse	r18, r1
 21e:	01 c0       	rjmp	.+2      	; 0x222 <TransmitTick+0x2a>
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	c9 2f       	mov	r28, r25
 224:	d8 2f       	mov	r29, r24
				state = transmitStop;
			}
			break;
	}
	
	switch(state) {
 226:	c1 30       	cpi	r28, 0x01	; 1
 228:	d1 05       	cpc	r29, r1
 22a:	41 f4       	brne	.+16     	; 0x23c <TransmitTick+0x44>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 22c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
		case transmitStart:
			if(USART_IsSendReady(LEADER__)) {
 230:	85 ff       	sbrs	r24, 5
 232:	04 c0       	rjmp	.+8      	; 0x23c <TransmitTick+0x44>
				USART_Send(a_out, LEADER__);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <a_out>
 23a:	cc df       	rcall	.-104    	; 0x1d4 <USART_Send>
		case transmitStop:
		break;
	}
	
	return state;
}
 23c:	ce 01       	movw	r24, r28
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	41 f0       	breq	.+16     	; 0x258 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 248:	e0 ec       	ldi	r30, 0xC0	; 192
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	ec f7       	brge	.-6      	; 0x24c <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 252:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 256:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 258:	e8 ec       	ldi	r30, 0xC8	; 200
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 23       	and	r24, r24
 260:	ec f7       	brge	.-6      	; 0x25c <USART_Receive+0x18>
		return UDR1;
 262:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 266:	08 95       	ret

00000268 <ReceiveTick>:
	return state;
}

enum Receivestate{receiveStop, receiveStart};
	
int ReceiveTick(int state) {
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
	switch(state) {
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	49 f0       	breq	.+18     	; 0x282 <ReceiveTick+0x1a>
		default:
		case receiveStop:
			if(isLeader) {
				state = receiveStop;
			} else {
				state = receiveStart;
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <isLeader>
 278:	21 11       	cpse	r18, r1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	c9 2f       	mov	r28, r25
 27e:	d8 2f       	mov	r29, r24
 280:	08 c0       	rjmp	.+16     	; 0x292 <ReceiveTick+0x2a>
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <isLeader>
 28a:	21 11       	cpse	r18, r1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	c9 2f       	mov	r28, r25
 290:	d8 2f       	mov	r29, r24
				state = receiveStart;
			}
		break;
	}
	
	switch(state) {
 292:	c1 30       	cpi	r28, 0x01	; 1
 294:	d1 05       	cpc	r29, r1
 296:	a1 f4       	brne	.+40     	; 0x2c0 <ReceiveTick+0x58>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 298:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case receiveStop:
		break;
		case receiveStart:
			if(USART_HasReceived(FOLLOWER__)) {
 29c:	88 23       	and	r24, r24
 29e:	44 f4       	brge	.+16     	; 0x2b0 <ReceiveTick+0x48>
				a_out = USART_Receive(FOLLOWER__);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	d0 df       	rcall	.-96     	; 0x244 <USART_Receive>
 2a4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <a_out>
				timeToLead = 0;
 2a8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <timeToLead+0x1>
 2ac:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <timeToLead>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 2b0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				
			}
			if(USART_IsSendReady(LEADER__)) {
 2b4:	85 ff       	sbrs	r24, 5
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <ReceiveTick+0x58>
				USART_Send(a_out, LEADER__);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <a_out>
 2be:	8a df       	rcall	.-236    	; 0x1d4 <USART_Send>
			}
	}
	
	return state;
}
 2c0:	ce 01       	movw	r24, r28
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <TimerISR>:

task* tasks;

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
    static unsigned char i;
    for (i = 0; i < tasksNum; i++) { 
 2d6:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
 2da:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tasksNum>
 2de:	88 23       	and	r24, r24
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <TimerISR+0x1c>
 2e2:	53 c0       	rjmp	.+166    	; 0x38a <TimerISR+0xc2>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
        if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 2e6:	1b e0       	ldi	r17, 0x0B	; 11
 2e8:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <tasks>
 2ec:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <tasks+0x1>
 2f0:	18 9f       	mul	r17, r24
 2f2:	c0 0d       	add	r28, r0
 2f4:	d1 1d       	adc	r29, r1
 2f6:	11 24       	eor	r1, r1
 2f8:	4d 81       	ldd	r20, Y+5	; 0x05
 2fa:	5e 81       	ldd	r21, Y+6	; 0x06
 2fc:	6f 81       	ldd	r22, Y+7	; 0x07
 2fe:	78 85       	ldd	r23, Y+8	; 0x08
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	9a 81       	ldd	r25, Y+2	; 0x02
 304:	ab 81       	ldd	r26, Y+3	; 0x03
 306:	bc 81       	ldd	r27, Y+4	; 0x04
 308:	48 17       	cp	r20, r24
 30a:	59 07       	cpc	r21, r25
 30c:	6a 07       	cpc	r22, r26
 30e:	7b 07       	cpc	r23, r27
 310:	b0 f0       	brcs	.+44     	; 0x33e <TimerISR+0x76>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
 312:	88 81       	ld	r24, Y
 314:	e9 85       	ldd	r30, Y+9	; 0x09
 316:	fa 85       	ldd	r31, Y+10	; 0x0a
 318:	08 2e       	mov	r0, r24
 31a:	00 0c       	add	r0, r0
 31c:	99 0b       	sbc	r25, r25
 31e:	09 95       	icall
 320:	88 83       	st	Y, r24
            tasks[i].elapsedTime = 0;
 322:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 326:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <tasks>
 32a:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <tasks+0x1>
 32e:	18 9f       	mul	r17, r24
 330:	e0 0d       	add	r30, r0
 332:	f1 1d       	adc	r31, r1
 334:	11 24       	eor	r1, r1
 336:	15 82       	std	Z+5, r1	; 0x05
 338:	16 82       	std	Z+6, r1	; 0x06
 33a:	17 82       	std	Z+7, r1	; 0x07
 33c:	10 86       	std	Z+8, r1	; 0x08
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
 33e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 342:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <tasks>
 346:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <tasks+0x1>
 34a:	18 9f       	mul	r17, r24
 34c:	e0 0d       	add	r30, r0
 34e:	f1 1d       	adc	r31, r1
 350:	11 24       	eor	r1, r1
 352:	c5 80       	ldd	r12, Z+5	; 0x05
 354:	d6 80       	ldd	r13, Z+6	; 0x06
 356:	e7 80       	ldd	r14, Z+7	; 0x07
 358:	f0 84       	ldd	r15, Z+8	; 0x08
 35a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <tasksPeriodGCD>
 35e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <tasksPeriodGCD+0x1>
 362:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <tasksPeriodGCD+0x2>
 366:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <tasksPeriodGCD+0x3>
 36a:	4c 0d       	add	r20, r12
 36c:	5d 1d       	adc	r21, r13
 36e:	6e 1d       	adc	r22, r14
 370:	7f 1d       	adc	r23, r15
 372:	45 83       	std	Z+5, r20	; 0x05
 374:	56 83       	std	Z+6, r21	; 0x06
 376:	67 83       	std	Z+7, r22	; 0x07
 378:	70 87       	std	Z+8, r23	; 0x08

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
    static unsigned char i;
    for (i = 0; i < tasksNum; i++) { 
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
 380:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <tasksNum>
 384:	89 17       	cp	r24, r25
 386:	08 f4       	brcc	.+2      	; 0x38a <TimerISR+0xc2>
 388:	af cf       	rjmp	.-162    	; 0x2e8 <TimerISR+0x20>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
            tasks[i].elapsedTime = 0;
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
    }
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	08 95       	ret

0000039a <__vector_13>:

///////////////////////////////////////////////////////////////////////////////
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	0b b6       	in	r0, 0x3b	; 59
 3a6:	0f 92       	push	r0
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	tasksPeriodCntDown--; 			// Count down to 0 rather than up to TOP
 3c0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tasksPeriodCntDown>
 3c4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tasksPeriodCntDown+0x1>
 3c8:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <tasksPeriodCntDown+0x2>
 3cc:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <tasksPeriodCntDown+0x3>
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	a1 09       	sbc	r26, r1
 3d4:	b1 09       	sbc	r27, r1
 3d6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tasksPeriodCntDown>
 3da:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tasksPeriodCntDown+0x1>
 3de:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <tasksPeriodCntDown+0x2>
 3e2:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <tasksPeriodCntDown+0x3>
	if (tasksPeriodCntDown == 0) { 	// results in a more efficient compare
 3e6:	89 2b       	or	r24, r25
 3e8:	8a 2b       	or	r24, r26
 3ea:	8b 2b       	or	r24, r27
 3ec:	89 f4       	brne	.+34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		TimerISR(); 				// Call the ISR that the user uses
 3ee:	6c df       	rcall	.-296    	; 0x2c8 <TimerISR>
		tasksPeriodCntDown = tasksPeriodGCD;
 3f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tasksPeriodGCD>
 3f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tasksPeriodGCD+0x1>
 3f8:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <tasksPeriodGCD+0x2>
 3fc:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <tasksPeriodGCD+0x3>
 400:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tasksPeriodCntDown>
 404:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tasksPeriodCntDown+0x1>
 408:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <tasksPeriodCntDown+0x2>
 40c:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <tasksPeriodCntDown+0x3>
	}
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0b be       	out	0x3b, r0	; 59
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <TimerSet>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 436:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <tasksPeriodGCD>
 43a:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <tasksPeriodGCD+0x1>
 43e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tasksPeriodGCD+0x2>
 442:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tasksPeriodGCD+0x3>
	tasksPeriodCntDown = tasksPeriodGCD;
 446:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <tasksPeriodCntDown>
 44a:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <tasksPeriodCntDown+0x1>
 44e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tasksPeriodCntDown+0x2>
 452:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tasksPeriodCntDown+0x3>
 456:	08 95       	ret

00000458 <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 458:	8b e0       	ldi	r24, 0x0B	; 11
 45a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
					// Thus TCCR1B = 00001011 or 0x0B
					// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
					// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 45e:	8d e7       	ldi	r24, 0x7D	; 125
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 466:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					// So when TCNT1 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

#if defined (__AVR_ATmega1284__)
    TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
#else
    TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
#endif

	// Initialize avr counter
	TCNT1 = 0;
 470:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 474:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 478:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tasksPeriodGCD>
 47c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tasksPeriodGCD+0x1>
 480:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <tasksPeriodGCD+0x2>
 484:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <tasksPeriodGCD+0x3>
 488:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tasksPeriodCntDown>
 48c:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tasksPeriodCntDown+0x1>
 490:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <tasksPeriodCntDown+0x2>
 494:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <tasksPeriodCntDown+0x3>

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 498:	8f b7       	in	r24, 0x3f	; 63
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	8f bf       	out	0x3f, r24	; 63
 49e:	08 95       	ret

000004a0 <main>:
	return state;
}


int main(void)
{
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	e7 97       	sbiw	r28, 0x37	; 55
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; PINA = 0x00;
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	81 b9       	out	0x01, r24	; 1
 4b8:	10 b8       	out	0x00, r1	; 0
	DDRC = 0xFF; PINC = 0x00;
 4ba:	87 b9       	out	0x07, r24	; 7
 4bc:	16 b8       	out	0x06, r1	; 6
	DDRB = 0x00; PINB = 0xFF;
 4be:	14 b8       	out	0x04, r1	; 4
 4c0:	83 b9       	out	0x03, r24	; 3
	DDRD = 0b00000101; PIND = 0b11111010;
 4c2:	15 e0       	ldi	r17, 0x05	; 5
 4c4:	1a b9       	out	0x0a, r17	; 10
 4c6:	8a ef       	ldi	r24, 0xFA	; 250
 4c8:	89 b9       	out	0x09, r24	; 9
	
	initUSART(LEADER__);
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	61 de       	rcall	.-830    	; 0x190 <initUSART>
	initUSART(FOLLOWER__);
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	5f de       	rcall	.-834    	; 0x190 <initUSART>
	
	struct task SetOutput = {-1, 1000, 1000, &SetOutputTick};
 4d2:	8b e0       	ldi	r24, 0x0B	; 11
 4d4:	ea e0       	ldi	r30, 0x0A	; 10
 4d6:	f1 e0       	ldi	r31, 0x01	; 1
 4d8:	de 01       	movw	r26, r28
 4da:	11 96       	adiw	r26, 0x01	; 1
 4dc:	01 90       	ld	r0, Z+
 4de:	0d 92       	st	X+, r0
 4e0:	8a 95       	dec	r24
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <main+0x3c>
	struct task Receive = {-1, 5, 5, &ReceiveTick};
 4e4:	8b e0       	ldi	r24, 0x0B	; 11
 4e6:	e5 e1       	ldi	r30, 0x15	; 21
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	de 01       	movw	r26, r28
 4ec:	1c 96       	adiw	r26, 0x0c	; 12
 4ee:	01 90       	ld	r0, Z+
 4f0:	0d 92       	st	X+, r0
 4f2:	8a 95       	dec	r24
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0x4e>
	struct task LEDcontrol = {-1, 50, 50, &LEDcontrolTick};
 4f6:	8b e0       	ldi	r24, 0x0B	; 11
 4f8:	e0 e2       	ldi	r30, 0x20	; 32
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	de 01       	movw	r26, r28
 4fe:	57 96       	adiw	r26, 0x17	; 23
 500:	01 90       	ld	r0, Z+
 502:	0d 92       	st	X+, r0
 504:	8a 95       	dec	r24
 506:	e1 f7       	brne	.-8      	; 0x500 <main+0x60>
	struct task Transmit = {-1, 50, 50, &TransmitTick};
 508:	8b e0       	ldi	r24, 0x0B	; 11
 50a:	eb e2       	ldi	r30, 0x2B	; 43
 50c:	f1 e0       	ldi	r31, 0x01	; 1
 50e:	de 01       	movw	r26, r28
 510:	92 96       	adiw	r26, 0x22	; 34
 512:	01 90       	ld	r0, Z+
 514:	0d 92       	st	X+, r0
 516:	8a 95       	dec	r24
 518:	e1 f7       	brne	.-8      	; 0x512 <main+0x72>
	struct task UpdateStatus = {-1, 5, 5, &UpdateStatusTick};
 51a:	8b e0       	ldi	r24, 0x0B	; 11
 51c:	e6 e3       	ldi	r30, 0x36	; 54
 51e:	f1 e0       	ldi	r31, 0x01	; 1
 520:	de 01       	movw	r26, r28
 522:	9d 96       	adiw	r26, 0x2d	; 45
 524:	01 90       	ld	r0, Z+
 526:	0d 92       	st	X+, r0
 528:	8a 95       	dec	r24
 52a:	e1 f7       	brne	.-8      	; 0x524 <main+0x84>
		
	tasksNum = 5;
 52c:	10 93 48 01 	sts	0x0148, r17	; 0x800148 <tasksNum>
	tasksPeriodGCD = 5;
 530:	85 e0       	ldi	r24, 0x05	; 5
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	a0 e0       	ldi	r26, 0x00	; 0
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tasksPeriodGCD>
 53c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tasksPeriodGCD+0x1>
 540:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <tasksPeriodGCD+0x2>
 544:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <tasksPeriodGCD+0x3>
	
	tasks = malloc(tasksNum * sizeof(task));
 548:	87 e3       	ldi	r24, 0x37	; 55
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	37 d0       	rcall	.+110    	; 0x5bc <malloc>
 54e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <tasks+0x1>
 552:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tasks>
	tasks[0] = SetOutput;
 556:	2b e0       	ldi	r18, 0x0B	; 11
 558:	fe 01       	movw	r30, r28
 55a:	31 96       	adiw	r30, 0x01	; 1
 55c:	dc 01       	movw	r26, r24
 55e:	01 90       	ld	r0, Z+
 560:	0d 92       	st	X+, r0
 562:	2a 95       	dec	r18
 564:	e1 f7       	brne	.-8      	; 0x55e <main+0xbe>
	tasks[1] = Receive;
 566:	2b e0       	ldi	r18, 0x0B	; 11
 568:	fe 01       	movw	r30, r28
 56a:	3c 96       	adiw	r30, 0x0c	; 12
 56c:	dc 01       	movw	r26, r24
 56e:	1b 96       	adiw	r26, 0x0b	; 11
 570:	01 90       	ld	r0, Z+
 572:	0d 92       	st	X+, r0
 574:	2a 95       	dec	r18
 576:	e1 f7       	brne	.-8      	; 0x570 <main+0xd0>
	tasks[2] = LEDcontrol;
 578:	2b e0       	ldi	r18, 0x0B	; 11
 57a:	fe 01       	movw	r30, r28
 57c:	77 96       	adiw	r30, 0x17	; 23
 57e:	dc 01       	movw	r26, r24
 580:	56 96       	adiw	r26, 0x16	; 22
 582:	01 90       	ld	r0, Z+
 584:	0d 92       	st	X+, r0
 586:	2a 95       	dec	r18
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0xe2>
	tasks[3] = Transmit;
 58a:	2b e0       	ldi	r18, 0x0B	; 11
 58c:	fe 01       	movw	r30, r28
 58e:	b2 96       	adiw	r30, 0x22	; 34
 590:	dc 01       	movw	r26, r24
 592:	91 96       	adiw	r26, 0x21	; 33
 594:	01 90       	ld	r0, Z+
 596:	0d 92       	st	X+, r0
 598:	2a 95       	dec	r18
 59a:	e1 f7       	brne	.-8      	; 0x594 <main+0xf4>
	tasks[4] = UpdateStatus;
 59c:	2b e0       	ldi	r18, 0x0B	; 11
 59e:	fe 01       	movw	r30, r28
 5a0:	bd 96       	adiw	r30, 0x2d	; 45
 5a2:	dc 01       	movw	r26, r24
 5a4:	9c 96       	adiw	r26, 0x2c	; 44
 5a6:	01 90       	ld	r0, Z+
 5a8:	0d 92       	st	X+, r0
 5aa:	2a 95       	dec	r18
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x106>
	
	TimerSet(tasksPeriodGCD);
 5ae:	65 e0       	ldi	r22, 0x05	; 5
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 5b6:	3f df       	rcall	.-386    	; 0x436 <TimerSet>
 5b8:	4f df       	rcall	.-354    	; 0x458 <TimerOn>
 5ba:	ff cf       	rjmp	.-2      	; 0x5ba <main+0x11a>

000005bc <malloc>:
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	91 05       	cpc	r25, r1
 5c8:	10 f4       	brcc	.+4      	; 0x5ce <malloc+0x12>
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <__flp>
 5d2:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <__flp+0x1>
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	a0 e0       	ldi	r26, 0x00	; 0
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	30 97       	sbiw	r30, 0x00	; 0
 5e0:	19 f1       	breq	.+70     	; 0x628 <malloc+0x6c>
 5e2:	40 81       	ld	r20, Z
 5e4:	51 81       	ldd	r21, Z+1	; 0x01
 5e6:	02 81       	ldd	r16, Z+2	; 0x02
 5e8:	13 81       	ldd	r17, Z+3	; 0x03
 5ea:	48 17       	cp	r20, r24
 5ec:	59 07       	cpc	r21, r25
 5ee:	c8 f0       	brcs	.+50     	; 0x622 <malloc+0x66>
 5f0:	84 17       	cp	r24, r20
 5f2:	95 07       	cpc	r25, r21
 5f4:	69 f4       	brne	.+26     	; 0x610 <malloc+0x54>
 5f6:	10 97       	sbiw	r26, 0x00	; 0
 5f8:	31 f0       	breq	.+12     	; 0x606 <malloc+0x4a>
 5fa:	12 96       	adiw	r26, 0x02	; 2
 5fc:	0c 93       	st	X, r16
 5fe:	12 97       	sbiw	r26, 0x02	; 2
 600:	13 96       	adiw	r26, 0x03	; 3
 602:	1c 93       	st	X, r17
 604:	27 c0       	rjmp	.+78     	; 0x654 <malloc+0x98>
 606:	00 93 51 01 	sts	0x0151, r16	; 0x800151 <__flp>
 60a:	10 93 52 01 	sts	0x0152, r17	; 0x800152 <__flp+0x1>
 60e:	22 c0       	rjmp	.+68     	; 0x654 <malloc+0x98>
 610:	21 15       	cp	r18, r1
 612:	31 05       	cpc	r19, r1
 614:	19 f0       	breq	.+6      	; 0x61c <malloc+0x60>
 616:	42 17       	cp	r20, r18
 618:	53 07       	cpc	r21, r19
 61a:	18 f4       	brcc	.+6      	; 0x622 <malloc+0x66>
 61c:	9a 01       	movw	r18, r20
 61e:	bd 01       	movw	r22, r26
 620:	ef 01       	movw	r28, r30
 622:	df 01       	movw	r26, r30
 624:	f8 01       	movw	r30, r16
 626:	db cf       	rjmp	.-74     	; 0x5de <malloc+0x22>
 628:	21 15       	cp	r18, r1
 62a:	31 05       	cpc	r19, r1
 62c:	f9 f0       	breq	.+62     	; 0x66c <malloc+0xb0>
 62e:	28 1b       	sub	r18, r24
 630:	39 0b       	sbc	r19, r25
 632:	24 30       	cpi	r18, 0x04	; 4
 634:	31 05       	cpc	r19, r1
 636:	80 f4       	brcc	.+32     	; 0x658 <malloc+0x9c>
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	9b 81       	ldd	r25, Y+3	; 0x03
 63c:	61 15       	cp	r22, r1
 63e:	71 05       	cpc	r23, r1
 640:	21 f0       	breq	.+8      	; 0x64a <malloc+0x8e>
 642:	fb 01       	movw	r30, r22
 644:	93 83       	std	Z+3, r25	; 0x03
 646:	82 83       	std	Z+2, r24	; 0x02
 648:	04 c0       	rjmp	.+8      	; 0x652 <malloc+0x96>
 64a:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <__flp+0x1>
 64e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <__flp>
 652:	fe 01       	movw	r30, r28
 654:	32 96       	adiw	r30, 0x02	; 2
 656:	44 c0       	rjmp	.+136    	; 0x6e0 <malloc+0x124>
 658:	fe 01       	movw	r30, r28
 65a:	e2 0f       	add	r30, r18
 65c:	f3 1f       	adc	r31, r19
 65e:	81 93       	st	Z+, r24
 660:	91 93       	st	Z+, r25
 662:	22 50       	subi	r18, 0x02	; 2
 664:	31 09       	sbc	r19, r1
 666:	39 83       	std	Y+1, r19	; 0x01
 668:	28 83       	st	Y, r18
 66a:	3a c0       	rjmp	.+116    	; 0x6e0 <malloc+0x124>
 66c:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
 670:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
 674:	23 2b       	or	r18, r19
 676:	41 f4       	brne	.+16     	; 0x688 <malloc+0xcc>
 678:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 67c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 680:	30 93 50 01 	sts	0x0150, r19	; 0x800150 <__brkval+0x1>
 684:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <__brkval>
 688:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 68c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 690:	21 15       	cp	r18, r1
 692:	31 05       	cpc	r19, r1
 694:	41 f4       	brne	.+16     	; 0x6a6 <malloc+0xea>
 696:	2d b7       	in	r18, 0x3d	; 61
 698:	3e b7       	in	r19, 0x3e	; 62
 69a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 69e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 6a2:	24 1b       	sub	r18, r20
 6a4:	35 0b       	sbc	r19, r21
 6a6:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <__brkval>
 6aa:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <__brkval+0x1>
 6ae:	e2 17       	cp	r30, r18
 6b0:	f3 07       	cpc	r31, r19
 6b2:	a0 f4       	brcc	.+40     	; 0x6dc <malloc+0x120>
 6b4:	2e 1b       	sub	r18, r30
 6b6:	3f 0b       	sbc	r19, r31
 6b8:	28 17       	cp	r18, r24
 6ba:	39 07       	cpc	r19, r25
 6bc:	78 f0       	brcs	.+30     	; 0x6dc <malloc+0x120>
 6be:	ac 01       	movw	r20, r24
 6c0:	4e 5f       	subi	r20, 0xFE	; 254
 6c2:	5f 4f       	sbci	r21, 0xFF	; 255
 6c4:	24 17       	cp	r18, r20
 6c6:	35 07       	cpc	r19, r21
 6c8:	48 f0       	brcs	.+18     	; 0x6dc <malloc+0x120>
 6ca:	4e 0f       	add	r20, r30
 6cc:	5f 1f       	adc	r21, r31
 6ce:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <__brkval+0x1>
 6d2:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <__brkval>
 6d6:	81 93       	st	Z+, r24
 6d8:	91 93       	st	Z+, r25
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <malloc+0x124>
 6dc:	e0 e0       	ldi	r30, 0x00	; 0
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	cf 01       	movw	r24, r30
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	0f 91       	pop	r16
 6ea:	08 95       	ret

000006ec <free>:
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <free+0xa>
 6f4:	81 c0       	rjmp	.+258    	; 0x7f8 <free+0x10c>
 6f6:	fc 01       	movw	r30, r24
 6f8:	32 97       	sbiw	r30, 0x02	; 2
 6fa:	13 82       	std	Z+3, r1	; 0x03
 6fc:	12 82       	std	Z+2, r1	; 0x02
 6fe:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <__flp>
 702:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <__flp+0x1>
 706:	10 97       	sbiw	r26, 0x00	; 0
 708:	81 f4       	brne	.+32     	; 0x72a <free+0x3e>
 70a:	20 81       	ld	r18, Z
 70c:	31 81       	ldd	r19, Z+1	; 0x01
 70e:	82 0f       	add	r24, r18
 710:	93 1f       	adc	r25, r19
 712:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
 716:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
 71a:	28 17       	cp	r18, r24
 71c:	39 07       	cpc	r19, r25
 71e:	51 f5       	brne	.+84     	; 0x774 <free+0x88>
 720:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <__brkval+0x1>
 724:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <__brkval>
 728:	67 c0       	rjmp	.+206    	; 0x7f8 <free+0x10c>
 72a:	ed 01       	movw	r28, r26
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	ce 17       	cp	r28, r30
 732:	df 07       	cpc	r29, r31
 734:	40 f4       	brcc	.+16     	; 0x746 <free+0x5a>
 736:	4a 81       	ldd	r20, Y+2	; 0x02
 738:	5b 81       	ldd	r21, Y+3	; 0x03
 73a:	9e 01       	movw	r18, r28
 73c:	41 15       	cp	r20, r1
 73e:	51 05       	cpc	r21, r1
 740:	f1 f0       	breq	.+60     	; 0x77e <free+0x92>
 742:	ea 01       	movw	r28, r20
 744:	f5 cf       	rjmp	.-22     	; 0x730 <free+0x44>
 746:	d3 83       	std	Z+3, r29	; 0x03
 748:	c2 83       	std	Z+2, r28	; 0x02
 74a:	40 81       	ld	r20, Z
 74c:	51 81       	ldd	r21, Z+1	; 0x01
 74e:	84 0f       	add	r24, r20
 750:	95 1f       	adc	r25, r21
 752:	c8 17       	cp	r28, r24
 754:	d9 07       	cpc	r29, r25
 756:	59 f4       	brne	.+22     	; 0x76e <free+0x82>
 758:	88 81       	ld	r24, Y
 75a:	99 81       	ldd	r25, Y+1	; 0x01
 75c:	84 0f       	add	r24, r20
 75e:	95 1f       	adc	r25, r21
 760:	02 96       	adiw	r24, 0x02	; 2
 762:	91 83       	std	Z+1, r25	; 0x01
 764:	80 83       	st	Z, r24
 766:	8a 81       	ldd	r24, Y+2	; 0x02
 768:	9b 81       	ldd	r25, Y+3	; 0x03
 76a:	93 83       	std	Z+3, r25	; 0x03
 76c:	82 83       	std	Z+2, r24	; 0x02
 76e:	21 15       	cp	r18, r1
 770:	31 05       	cpc	r19, r1
 772:	29 f4       	brne	.+10     	; 0x77e <free+0x92>
 774:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__flp+0x1>
 778:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__flp>
 77c:	3d c0       	rjmp	.+122    	; 0x7f8 <free+0x10c>
 77e:	e9 01       	movw	r28, r18
 780:	fb 83       	std	Y+3, r31	; 0x03
 782:	ea 83       	std	Y+2, r30	; 0x02
 784:	49 91       	ld	r20, Y+
 786:	59 91       	ld	r21, Y+
 788:	c4 0f       	add	r28, r20
 78a:	d5 1f       	adc	r29, r21
 78c:	ec 17       	cp	r30, r28
 78e:	fd 07       	cpc	r31, r29
 790:	61 f4       	brne	.+24     	; 0x7aa <free+0xbe>
 792:	80 81       	ld	r24, Z
 794:	91 81       	ldd	r25, Z+1	; 0x01
 796:	84 0f       	add	r24, r20
 798:	95 1f       	adc	r25, r21
 79a:	02 96       	adiw	r24, 0x02	; 2
 79c:	e9 01       	movw	r28, r18
 79e:	99 83       	std	Y+1, r25	; 0x01
 7a0:	88 83       	st	Y, r24
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	9b 83       	std	Y+3, r25	; 0x03
 7a8:	8a 83       	std	Y+2, r24	; 0x02
 7aa:	e0 e0       	ldi	r30, 0x00	; 0
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	12 96       	adiw	r26, 0x02	; 2
 7b0:	8d 91       	ld	r24, X+
 7b2:	9c 91       	ld	r25, X
 7b4:	13 97       	sbiw	r26, 0x03	; 3
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	19 f0       	breq	.+6      	; 0x7c0 <free+0xd4>
 7ba:	fd 01       	movw	r30, r26
 7bc:	dc 01       	movw	r26, r24
 7be:	f7 cf       	rjmp	.-18     	; 0x7ae <free+0xc2>
 7c0:	8d 91       	ld	r24, X+
 7c2:	9c 91       	ld	r25, X
 7c4:	11 97       	sbiw	r26, 0x01	; 1
 7c6:	9d 01       	movw	r18, r26
 7c8:	2e 5f       	subi	r18, 0xFE	; 254
 7ca:	3f 4f       	sbci	r19, 0xFF	; 255
 7cc:	82 0f       	add	r24, r18
 7ce:	93 1f       	adc	r25, r19
 7d0:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
 7d4:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
 7d8:	28 17       	cp	r18, r24
 7da:	39 07       	cpc	r19, r25
 7dc:	69 f4       	brne	.+26     	; 0x7f8 <free+0x10c>
 7de:	30 97       	sbiw	r30, 0x00	; 0
 7e0:	29 f4       	brne	.+10     	; 0x7ec <free+0x100>
 7e2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__flp+0x1>
 7e6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <__flp>
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <free+0x104>
 7ec:	13 82       	std	Z+3, r1	; 0x03
 7ee:	12 82       	std	Z+2, r1	; 0x02
 7f0:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <__brkval+0x1>
 7f4:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <__brkval>
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	08 95       	ret

000007fe <_exit>:
 7fe:	f8 94       	cli

00000800 <__stop_program>:
 800:	ff cf       	rjmp	.-2      	; 0x800 <__stop_program>
